(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    143172,       3197]
NotebookOptionsPosition[    136708,       3052]
NotebookOutlinePosition[    137052,       3067]
CellTagsIndexPosition[    137009,       3064]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[TextData[StyleBox["Global Health DALYs", "Subsection"]], "Section",
 CellChangeTimes->{{3.707773492470165*^9, 
  3.707773499995537*^9}},ExpressionUUID->"9c2ec51d-3c76-4a49-b3be-\
0a7aa5f257b1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"WHOraw", "=", 
   RowBox[{
   "Import", "[", 
    "\"\<C:\\\\Users\\\\Ben\\\\Documents\\\\wolfram\\\\Wolfram-Summer-School-\
2017-Project\\\\Data Sets\\\\GHE2015_DALYs-2015-country.csv\>\"", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7076807352760344`*^9, 3.7076807551908593`*^9}, {
   3.7077038489710875`*^9, 3.7077038510885525`*^9}, 3.7077040180813856`*^9, {
   3.7077734492354345`*^9, 3.707773479392231*^9}, {3.7078352807603626`*^9, 
   3.7078352865777826`*^9}},ExpressionUUID->"9a6e273f-82d3-4e47-9e09-\
6dc30235fb16"],

Cell[BoxData[
 RowBox[{
  RowBox[{"WHOheaders", "=", " ", 
   RowBox[{"Prepend", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"Last", "@", 
        RowBox[{"DeleteCases", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"ToString", "[", 
             RowBox[{"WHOraw", "[", 
              RowBox[{"[", 
               RowBox[{"#", ",", "4"}], "]"}], "]"}], "]"}], ",", 
            RowBox[{"ToString", "[", 
             RowBox[{"WHOraw", "[", 
              RowBox[{"[", 
               RowBox[{"#", ",", "5"}], "]"}], "]"}], "]"}], ",", 
            RowBox[{"ToString", "[", 
             RowBox[{"WHOraw", "[", 
              RowBox[{"[", 
               RowBox[{"#", ",", "6"}], "]"}], "]"}], "]"}], ",", 
            RowBox[{"ToString", "[", 
             RowBox[{"WHOraw", "[", 
              RowBox[{"[", 
               RowBox[{"#", ",", "7"}], "]"}], "]"}], "]"}]}], "}"}], ",", 
          "\"\<\>\""}], "]"}]}], "&"}], "/@", 
      RowBox[{"Range", "[", 
       RowBox[{"12", ",", "226"}], "]"}]}], ",", "\"\<Countries\>\""}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.707750172650075*^9, 3.7077502323772078`*^9}, {
   3.707750748371519*^9, 3.707750757969758*^9}, 3.7077510582310123`*^9, 
   3.7077511356224413`*^9, {3.707770216066874*^9, 3.7077702517662487`*^9}, {
   3.7077703840824127`*^9, 3.7077704214890633`*^9}, 3.707772603165276*^9, {
   3.7077730870260077`*^9, 3.7077731183177958`*^9}, {3.707835288115347*^9, 
   3.7078353044388433`*^9}, {3.7078353346192045`*^9, 3.707835342949281*^9}, {
   3.708185422113581*^9, 3.7081854241060915`*^9}, {3.70818545836668*^9, 
   3.7081855245255084`*^9}},ExpressionUUID->"7e04c03c-6a54-4172-8877-\
f7e489e320bf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"WHOpopulation", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"WHOraw", "[", 
     RowBox[{"[", 
      RowBox[{"11", ",", "#"}], "]"}], "]"}], "&"}], "/@", 
   RowBox[{"Range", "[", 
    RowBox[{"8", ",", "190"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.7078353474533544`*^9, 3.7078353733054276`*^9}, 
   3.707839482379003*^9},ExpressionUUID->"21723c62-4a24-44a1-bf14-\
1c43d2d03259"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "32527", ",", "2897", ",", "39667", ",", "25022", ",", "92", ",", "43417", 
   ",", "3018", ",", "23969", ",", "8545", ",", "9754", ",", "388", ",", 
   "1377", ",", "160996", ",", "284", ",", "9496", ",", "11299", ",", "359", 
   ",", "10880", ",", "775", ",", "10725", ",", "3810", ",", "2262", ",", 
   "207848", ",", "423", ",", "7150", ",", "18106", ",", "11179", ",", 
   "15578", ",", "23344", ",", "35940", ",", "521", ",", "4900", ",", "14037",
    ",", "17948", ",", "1383925", ",", "48229", ",", "788", ",", "4620", ",", 
   "4808", ",", "22702", ",", "4240", ",", "11390", ",", "1165", ",", "10543",
    ",", "25155", ",", "77267", ",", "5669", ",", "888", ",", "10528", ",", 
   "16144", ",", "91508", ",", "6127", ",", "845", ",", "5228", ",", "1313", 
   ",", "99391", ",", "892", ",", "5503", ",", "64395", ",", "1725", ",", 
   "1991", ",", "4000", ",", "80689", ",", "27410", ",", "10955", ",", "107", 
   ",", "16343", ",", "12609", ",", "1844", ",", "767", ",", "10711", ",", 
   "8075", ",", "9855", ",", "329", ",", "1311051", ",", "257564", ",", 
   "79109", ",", "36423", ",", "4688", ",", "8064", ",", "59798", ",", "2793",
    ",", "126573", ",", "7595", ",", "17625", ",", "46050", ",", "112", ",", 
   "3892", ",", "5940", ",", "6802", ",", "1971", ",", "5851", ",", "2135", 
   ",", "4503", ",", "6278", ",", "2878", ",", "567", ",", "24235", ",", 
   "17215", ",", "30331", ",", "364", ",", "17600", ",", "419", ",", "4068", 
   ",", "1273", ",", "127017", ",", "104", ",", "2959", ",", "626", ",", 
   "34378", ",", "27978", ",", "53897", ",", "2459", ",", "28514", ",", 
   "16925", ",", "4529", ",", "6082", ",", "19899", ",", "182202", ",", 
   "5211", ",", "4491", ",", "188925", ",", "3929", ",", "7619", ",", "6639", 
   ",", "31377", ",", "100699", ",", "38612", ",", "10350", ",", "2235", ",", 
   "50293", ",", "4069", ",", "19511", ",", "143457", ",", "11610", ",", 
   "185", ",", "109", ",", "193", ",", "190", ",", "31540", ",", "15129", ",",
    "8851", ",", "96", ",", "6453", ",", "5604", ",", "5426", ",", "2068", 
   ",", "584", ",", "10787", ",", "54490", ",", "12340", ",", "46122", ",", 
   "20715", ",", "40235", ",", "543", ",", "1287", ",", "9779", ",", "8299", 
   ",", "18502", ",", "8482", ",", "67959", ",", "2078", ",", "1185", ",", 
   "7305", ",", "106", ",", "1360", ",", "11254", ",", "78666", ",", "5374", 
   ",", "39032", ",", "44824", ",", "9157", ",", "64716", ",", "53470", ",", 
   "321774", ",", "3432", ",", "29893", ",", "265", ",", "31108", ",", 
   "93448", ",", "26832", ",", "16212", ",", "15603"}], "}"}]], "Output",
 CellChangeTimes->{3.7081851411198244`*^9, 3.7082035129697447`*^9, 
  3.7082064543233123`*^9, 3.708208769525818*^9, 3.7082096621893005`*^9, 
  3.7082099540679617`*^9, 3.7082115795613885`*^9, 
  3.708250693122901*^9},ExpressionUUID->"d167d652-b481-4e51-a3b4-\
148e0d44b9fa"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"WHOfulldata", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"WHOraw", "[", 
        RowBox[{"[", 
         RowBox[{"8", ",", "#"}], "]"}], "]"}], "}"}], ",", 
      RowBox[{
       RowBox[{"WHOraw", "[", 
        RowBox[{"[", 
         RowBox[{
          RowBox[{"12", ";;", "226"}], ",", 
          RowBox[{"#", "+", "6"}]}], "]"}], "]"}], "/", 
       RowBox[{"WHOpopulation", "[", 
        RowBox[{"[", 
         RowBox[{"#", "-", "1"}], "]"}], "]"}]}]}], "]"}], "&"}], "/@", 
   RowBox[{"Range", "[", 
    RowBox[{"2", ",", "184"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.707704108532813*^9, 3.7077041116697145`*^9}, {
   3.7077041460612555`*^9, 3.7077041768165483`*^9}, {3.7077042263162456`*^9, 
   3.707704239566161*^9}, {3.7077043140563173`*^9, 3.7077043216453066`*^9}, {
   3.707704389980071*^9, 3.7077044025836945`*^9}, {3.7077044588282375`*^9, 
   3.7077044601136107`*^9}, {3.7077045023213253`*^9, 
   3.7077045286566935`*^9}, {3.707748866061947*^9, 3.707748866796521*^9}, {
   3.707748931137913*^9, 3.707748931385469*^9}, {3.707749029965438*^9, 
   3.707749067733385*^9}, 3.707749101874304*^9, {3.7077514132300854`*^9, 
   3.707751417956448*^9}, {3.707835357282896*^9, 3.707835379477868*^9}, {
   3.7078392677164936`*^9, 3.707839269971181*^9}, 
   3.7078395042437453`*^9},ExpressionUUID->"c6d8ad36-19be-4684-a017-\
3300a8c0d7f8"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            
            RowBox[{"\<\"Afghanistan\"\>", ",", "0.5943800534940205`", ",", 
             "0.2757586005472377`", ",", "0.08799151474159929`", ",", 
             "0.019479201893811297`", ",", "0.0033418390875272854`", ",", 
             "0.002530205675285148`", ",", "0.0000768592246441418`", ",", 
             "0.0006548405939680881`", ",", "0.000012297475943062687`", ",", 
             "0.00001537184492882836`", ",", "0.000052264272758016415`", ",", 
             
             TemplateBox[{"192"},
              "OutputSizeLimit`Skeleton"], ",", "0.009671964829218805`", ",", 
             "0.001312755556921942`", ",", "0.012036154579272604`", ",", 
             "0.0015402588618686015`", ",", "0.010963199803240386`", ",", 
             "0.005278691548559658`", ",", "0.00019368524610323732`", ",", 
             "0.032652872997817196`", ",", "0.04540228118178744`", ",", 
             "0.0033848802533280042`", ",", "0.004408645125587973`", ",", 
             "0.037608755802871464`"}], "}"}], ",", 
           TemplateBox[{"181"},
            "OutputSizeLimit`Skeleton"], ",", 
           RowBox[{"{", 
            TemplateBox[{"1"},
             "OutputSizeLimit`Skeleton"], "}"}]}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{65., {3., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{52., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{59., {1., 10.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 21, 15635245805294949239, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{62., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 21, 15635245805294949239, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{44., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 21, 15635245805294949239, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{78., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[15635245805294949239 === $SessionID, 
   Out[21], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{3.708185142942672*^9, 3.708203516942669*^9, 
  3.7082064545840144`*^9, 3.7082087697384186`*^9, 3.70820966239384*^9, 
  3.70820995425204*^9, 3.708211579729449*^9, 
  3.708250693339978*^9},ExpressionUUID->"32c369dc-3d91-41e0-be88-\
7c4ab7a4b264"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{"\"\<C:/Users/Ben/Documents/WHOdata.mx\>\"", ",", "WHOfulldata"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7082522580520883`*^9, 
  3.7082523263667107`*^9}},ExpressionUUID->"4bde3883-fed1-4c44-ac33-\
805b438d5e25"],

Cell[BoxData["\<\"C:/Users/Ben/Documents/WHOdata.mx\"\>"], "Output",
 CellChangeTimes->{
  3.7082527234815006`*^9},ExpressionUUID->"c789ecf0-38f8-4195-8cee-\
13d8f800da33"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"WHOcountryrules1", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"#1", "->", 
      RowBox[{"StringReplace", "[", 
       RowBox[{"#", ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "\"\< and\>\"", ",", "\"\< the\>\"", ",", "\"\<, The\>\"", ",", 
           "\"\<-\>\"", ",", "\"\< of\>\"", ",", "\"\<People's\>\"", ",", 
           "\"\<Darussalam\>\"", ",", "\"\<n Federation\>\"", ",", 
           "\"\<(Bolivarian Republic of)\>\"", ",", 
           "\"\<(Plurinational State of)\>\"", ",", 
           "\"\<(Islamic Republic of)\>\"", ",", "\"\<n Arab Republic\>\"", 
           ",", "\"\<(Federated States of)\>\"", ",", 
           "\"\<United Republic of\>\"", ",", 
           "\"\<The former Yugoslav Republic of\>\"", ",", "\"\<, FYR\>\"", 
           ",", "\"\<, RB\>\"", ",", "\"\<, Rep.\>\"", ",", "\"\<Gaza\>\"", 
           ",", "\"\<, Fed. Sts.\>\"", ",", "\"\< SAR, China\>\"", ",", 
           "\"\<America\>\"", ",", "\"\<n Arab Jamahiriya\>\"", ",", 
           "\"\< \>\""}], "}"}], "\[Rule]", "\"\<\>\""}]}], "]"}]}], "&"}], "/@", 
    RowBox[{"WHOfulldata", "[", 
     RowBox[{"[", 
      RowBox[{
       RowBox[{"2", ";;"}], ",", "1"}], "]"}], "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.707687526299098*^9, 3.707687552640629*^9}, {
   3.7076880434485116`*^9, 3.707688046271986*^9}, {3.7076881219709787`*^9, 
   3.707688125276391*^9}, {3.707688167253264*^9, 3.7076882596681747`*^9}, {
   3.7076883501093454`*^9, 3.7076884600211706`*^9}, {3.7076884965696297`*^9, 
   3.7076885578900595`*^9}, {3.7076885989015665`*^9, 
   3.7076886116615887`*^9}, {3.707688663941883*^9, 3.7076887607976527`*^9}, {
   3.707688840333879*^9, 3.70768887788068*^9}, {3.707689042366359*^9, 
   3.7076890605209093`*^9}, {3.7076891023220053`*^9, 3.707689148442237*^9}, {
   3.707689229686344*^9, 3.707689232857997*^9}, 3.707689292496046*^9, {
   3.707701825610595*^9, 3.707701859314781*^9}, 3.7077020028728175`*^9, {
   3.707702083870307*^9, 3.707702093462143*^9}, {3.707702231880971*^9, 
   3.707702284701044*^9}, {3.7077023330155835`*^9, 3.7077023400361624`*^9}, 
   3.707702384522335*^9, {3.7077024332694654`*^9, 3.7077024356262846`*^9}, {
   3.7077026383719893`*^9, 3.7077026446718845`*^9}, {3.707702966364056*^9, 
   3.707702968895369*^9}, {3.7077030964347196`*^9, 3.707703114638601*^9}, {
   3.707705067937627*^9, 3.707705075013236*^9}, {3.7077051567037945`*^9, 
   3.7077051985327406`*^9}, {3.707835364154112*^9, 
   3.7078353998486404`*^9}},ExpressionUUID->"ba0f937f-89b9-406e-bd96-\
514ff8112f7d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"WHOcountryrules2", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\"\<CaboVerde\>\"", "\[Rule]", "\"\<CapeVerde\>\""}], ",", 
     RowBox[{
     "\"\<C\[CapitalATilde]\.b4ted'Ivoire\>\"", "->", "\"\<IvoryCoast\>\""}], 
     ",", 
     RowBox[{"\"\<LaoDemocraticRepublic\>\"", "\[Rule]", "\"\<Laos\>\""}], 
     ",", 
     RowBox[{"\"\<Congo\>\"", "\[Rule]", "\"\<RepublicCongo\>\""}], ",", 
     RowBox[{
     "\"\<Congo,Dem.Rep.\>\"", "\[Rule]", "\"\<DemocraticRepublicCongo\>\""}],
      ",", 
     RowBox[{
     "\"\<DemocraticRepublicKorea\>\"", "\[Rule]", "\"\<NorthKorea\>\""}], 
     ",", 
     RowBox[{"\"\<RepublicMoldova\>\"", "\[Rule]", "\"\<Moldova\>\""}], ",", 
     RowBox[{"\"\<RepublicKorea\>\"", "\[Rule]", "\"\<SouthKorea\>\""}], ",", 
     
     RowBox[{"\"\<VietNam\>\"", "\[Rule]", "\"\<Vietnam\>\""}], ",", 
     RowBox[{"\"\<StatePalestine\>\"", "\[Rule]", "\"\<WestBank\>\""}], ",", 
     RowBox[{"\"\<Egypt,ArabRep.\>\"", "\[Rule]", "\"\<Egypt\>\""}], ",", 
     RowBox[{"\"\<Iran,IslamicRep.\>\"", "\[Rule]", "\"\<Iran\>\""}], ",", 
     RowBox[{"\"\<LaoPDR\>\"", "\[Rule]", "\"\<Laos\>\""}], ",", 
     RowBox[{
     "\"\<VirginIslands(U.S.)\>\"", "\[Rule]", 
      "\"\<UnitedStatesVirginIslands\>\""}], ",", 
     RowBox[{
     "\"\<SintMaarten(Dutchpart)\>\"", "\[Rule]", "\"\<SintMaarten\>\""}], 
     ",", 
     RowBox[{"\"\<SlovakRepublic\>\"", "\[Rule]", "\"\<Slovakia\>\""}], ",", 
     RowBox[{
     "\"\<St.Martin(Frenchpart)\>\"", "\[Rule]", "\"\<SaintMartin\>\""}], ",", 
     RowBox[{"\"\<KyrgyzRepublic\>\"", "\[Rule]", "\"\<Kyrgyzstan\>\""}], ",", 
     RowBox[{"\"\<St.Lucia\>\"", "\[Rule]", "\"\<SaintLucia\>\""}], ",", 
     RowBox[{"\"\<St.KittsNevis\>\"", "\[Rule]", "\"\<SaintKittsNevis\>\""}], 
     ",", 
     RowBox[{
     "\"\<St.VincentGrenadines\>\"", "\[Rule]", 
      "\"\<SaintVincentGrenadines\>\""}], ",", 
     RowBox[{
     "\"\<Korea,Dem.People\[AHat]\.80\.99sRep.\>\"", "\[Rule]", 
      "\"\<NorthKorea\>\""}], ",", 
     RowBox[{"\"\<Korea\>\"", "\[Rule]", "\"\<SouthKorea\>\""}], ",", 
     RowBox[{"\"\<MacaoSAR,China\>\"", "\[Rule]", "\"\<Macau\>\""}], ",", 
     RowBox[{"\"\<IsleMan\>\"", "\[Rule]", "\"\<IsleOfMan\>\""}]}], "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.707688894807478*^9, 3.7076890276587286`*^9}, {
   3.7076891736419797`*^9, 3.707689184927518*^9}, {3.7076893737379427`*^9, 
   3.7076893753432446`*^9}, {3.707689437166299*^9, 3.7076894406280975`*^9}, {
   3.7076896514246855`*^9, 3.707689656823677*^9}, 3.7076909118760557`*^9, {
   3.7077018638199778`*^9, 3.7077018640219865`*^9}, {3.7077021328154263`*^9, 
   3.7077022207823486`*^9}, {3.70770234432533*^9, 3.707702354073615*^9}, {
   3.70770241774349*^9, 3.7077024594088297`*^9}, {3.7077024979453106`*^9, 
   3.7077025838923683`*^9}, {3.707702666194804*^9, 3.7077027625579987`*^9}, {
   3.707702858438263*^9, 3.7077028807124414`*^9}, {3.707703020289504*^9, 
   3.707703071816245*^9}, {3.7077031289102836`*^9, 3.707703138633472*^9}, {
   3.7077050701415963`*^9, 3.707705070267312*^9}, 3.707705209800852*^9, {
   3.7077741374907928`*^9, 3.707774148791422*^9}, {3.707835382534761*^9, 
   3.7078353854673643`*^9}},ExpressionUUID->"35fcbf5e-5f8c-454d-9166-\
452f30dfe214"],

Cell[BoxData[
 RowBox[{
  RowBox[{"WHOdata", "=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"{", "WHOheaders", "}"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"Flatten", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Entity", "[", 
            RowBox[{"\"\<Country\>\"", ",", 
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", 
           RowBox[{"#", "[", 
            RowBox[{"[", 
             RowBox[{"2", ";;"}], "]"}], "]"}]}], "}"}], "]"}], "&"}], "/@", 
       RowBox[{"(", 
        RowBox[{"WHOfulldata", "/.", "WHOcountryrules1"}], ")"}]}], "/.", 
      RowBox[{"WHOcountryrules2", "[", 
       RowBox[{"[", 
        RowBox[{
         RowBox[{"2", ";;"}], ",", "All"}], "]"}], "]"}]}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7077050258637676`*^9, 3.707705039593113*^9}, {
   3.7077051175189495`*^9, 3.707705120109974*^9}, 3.7077052597019515`*^9, {
   3.7077470293773623`*^9, 3.7077470687713675`*^9}, {3.7077471687655635`*^9, 
   3.7077472406713066`*^9}, {3.70774761192669*^9, 3.7077476580498333`*^9}, {
   3.707747689651222*^9, 3.7077477052138968`*^9}, 3.707748048482256*^9, 
   3.7077481625852313`*^9, 3.7077483977161083`*^9, {3.7077488832997866`*^9, 
   3.7077488887597837`*^9}, 3.707749143790366*^9, 3.707750851072164*^9, 
   3.7077509896786714`*^9, 3.7077712845409107`*^9, 3.707772598771638*^9, {
   3.7078354130260415`*^9, 3.7078354400226336`*^9}, 3.7078399481188917`*^9, 
   3.7078547119961*^9, 3.708185197605466*^9, {3.70818529535952*^9, 
   3.7081853044887233`*^9}, {3.7081854345141773`*^9, 3.708185441823103*^9}, {
   3.708185729864461*^9, 
   3.708185756342595*^9}},ExpressionUUID->"c24e5d49-41cc-41c6-9ce7-\
342c09728158"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataAssoWHO", "=", 
   RowBox[{"AssociationThread", "[", 
    RowBox[{
     RowBox[{"WHOheaders", "[", 
      RowBox[{"[", 
       RowBox[{"2", ";;"}], "]"}], "]"}], ",", 
     RowBox[{"Transpose", "[", 
      RowBox[{"Map", "[", 
       RowBox[{"Thread", ",", 
        RowBox[{"MapThread", "[", 
         RowBox[{"Rule", ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"WHOdata", "[", 
             RowBox[{"[", 
              RowBox[{
               RowBox[{"2", ";;"}], ",", "1"}], "]"}], "]"}], ",", 
            RowBox[{"WHOdata", "[", 
             RowBox[{"[", 
              RowBox[{
               RowBox[{"2", ";;"}], ",", 
               RowBox[{"2", ";;"}]}], "]"}], "]"}]}], "}"}]}], "]"}]}], "]"}],
       "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7081853467319884`*^9, 3.7081854095677605`*^9}, {
  3.7081855415629115`*^9, 
  3.7081855462508893`*^9}},ExpressionUUID->"618589de-72d1-4310-a704-\
d2076f61b2b5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataAssoWHO", "=", 
   RowBox[{"Map", "[", 
    RowBox[{"Association", ",", "dataAssoWHO"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.707862461528103*^9, 3.7078624896304893`*^9}, {
  3.707862524848749*^9, 3.707862534468708*^9}, {3.7079449397066154`*^9, 
  3.7079449412193346`*^9}, {3.70818576542873*^9, 
  3.708185768569582*^9}},ExpressionUUID->"7250d19f-1f2d-4ece-acc0-\
23a63fe2674d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"newDataAssoWHO", "=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{
       RowBox[{"{", "propValues", "}"}], ",", 
       RowBox[{"Map", "[", 
        RowBox[{"Association", ",", 
         RowBox[{"GroupBy", "[", 
          RowBox[{
           RowBox[{"Normal", "@", "propValues"}], ",", 
           RowBox[{
            RowBox[{"countriesContinent", "[", 
             RowBox[{"First", "@", "#"}], "]"}], "&"}]}], "]"}]}], "]"}]}], 
      "]"}], ",", 
     RowBox[{"Map", "[", 
      RowBox[{"Association", ",", "dataAssoWHO"}], "]"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.707862557559124*^9, 3.707862675697412*^9}, 
   3.707862708966178*^9, {3.707863149175424*^9, 3.7078631634319973`*^9}, {
   3.7078632634867353`*^9, 3.70786327823552*^9}, {3.70786336959268*^9, 
   3.707863493364532*^9}, 3.7079433335265894`*^9, {3.708185772526104*^9, 
   3.7081857764921255`*^9}},ExpressionUUID->"9292cb16-f040-4ca5-a1f9-\
b6f8c8a10d0e"],

Cell[CellGroupData[{

Cell["World Development Indicators", "Subsection",
 CellChangeTimes->{{3.707943976458652*^9, 
  3.7079439806957493`*^9}},ExpressionUUID->"c5bb8194-d4c5-4b3b-8743-\
774aa4329511"],

Cell["Import data from WDI spreadsheet", "Text",
 CellChangeTimes->{{3.707943988949911*^9, 
  3.707944004653798*^9}},ExpressionUUID->"be9adb96-6fb7-4945-99c9-\
d5c98d7e1799"],

Cell[BoxData[
 RowBox[{
  RowBox[{"WDIraw", "=", 
   RowBox[{
   "Import", "[", 
    "\"\<C:\\\\Users\\\\Ben\\\\Documents\\\\wolfram\\\\Wolfram-Summer-School-\
2017-Project\\\\Data Sets\\\\WDIEXCEL.csv\>\"", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7076806233290195`*^9, 3.707680631859372*^9}, {
   3.7076806832658415`*^9, 3.7076807222150717`*^9}, 3.7076807531424904`*^9, {
   3.707681935830248*^9, 3.7076819556523237`*^9}, {3.707685105326189*^9, 
   3.707685105932439*^9}, {3.707691747011965*^9, 3.707691749965951*^9}, {
   3.7078351270043163`*^9, 
   3.7078351420500913`*^9}},ExpressionUUID->"b673badb-6725-4d2c-950a-\
8b63b9c58dfa"],

Cell[BoxData[
 RowBox[{
  RowBox[{"WDIfulldata", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Join", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"WDIraw", "[", 
         RowBox[{"[", 
          RowBox[{"#", ",", "1"}], "]"}], "]"}], "}"}], ",", 
       RowBox[{"WDIraw", "[", 
        RowBox[{"[", 
         RowBox[{
          RowBox[{"#", ";;", 
           RowBox[{"#", "+", "1503"}]}], ",", "58"}], "]"}], "]"}]}], "]"}], 
     "&"}], "/@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"Range", "[", 
        RowBox[{"47", ",", "263"}], "]"}], "*", "1504"}], "+", "2"}], 
     ")"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7076920651358376`*^9, 3.7076920726947765`*^9}, {
   3.7076922340486546`*^9, 3.7076923380801306`*^9}, {3.707692371823743*^9, 
   3.7076923822823753`*^9}, {3.707692420913207*^9, 3.7076924647794476`*^9}, {
   3.707692525115038*^9, 3.7076925252219872`*^9}, {3.7076926183429127`*^9, 
   3.707692656075875*^9}, {3.707692758587716*^9, 3.7076927712085543`*^9}, {
   3.7076928359089584`*^9, 3.707692855978259*^9}, {3.7076928995971174`*^9, 
   3.7076929088010435`*^9}, {3.707693178560645*^9, 3.70769320073983*^9}, {
   3.707693264715839*^9, 3.707693265181675*^9}, 3.7077011477577314`*^9, {
   3.7077015191386085`*^9, 3.7077015199234304`*^9}, {3.70783513739071*^9, 
   3.707835147713171*^9}, {3.707835196418679*^9, 3.7078351970583143`*^9}, {
   3.7078352348591084`*^9, 
   3.707835235756274*^9}},ExpressionUUID->"12e4794b-872e-4a73-962c-\
b058a7b72d10"],

Cell["\<\
Clean up country names so that Wolfram can interpret them as entities\
\>", "Text",
 CellChangeTimes->{{3.707944014484744*^9, 
  3.70794403364053*^9}},ExpressionUUID->"87e5e04b-3ad8-47bb-9b64-\
9d3147a55cc7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{"\"\<C:/Users/Ben/Documents/WDIdata.mx\>\"", ",", "WDIdataclean"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.708252344904991*^9, 
  3.7082524135563335`*^9}},ExpressionUUID->"022fd87d-3d60-4ef9-8e40-\
615729e562d4"],

Cell[BoxData["\<\"C:/Users/Ben/Documents/WDIdata.mx\"\>"], "Output",
 CellChangeTimes->{
  3.7082527241513023`*^9},ExpressionUUID->"916f39be-0734-458d-a2c7-\
b16bbd12dd0a"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"WDIcountryrules1", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"#1", "->", 
      RowBox[{"StringReplace", "[", 
       RowBox[{"#", ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "\"\< and\>\"", ",", "\"\< the\>\"", ",", "\"\<, The\>\"", ",", 
           "\"\<-\>\"", ",", "\"\< of\>\"", ",", "\"\<People's\>\"", ",", 
           "\"\<Darussalam\>\"", ",", "\"\<n Federation\>\"", ",", 
           "\"\<(Bolivarian Republic of)\>\"", ",", 
           "\"\<(Plurinational State of)\>\"", ",", 
           "\"\<(Islamic Republic of)\>\"", ",", "\"\<n Arab Republic\>\"", 
           ",", "\"\<(Federated States of)\>\"", ",", 
           "\"\<United Republic of\>\"", ",", 
           "\"\<The former Yugoslav Republic of\>\"", ",", "\"\<, FYR\>\"", 
           ",", "\"\<, RB\>\"", ",", "\"\<, Rep.\>\"", ",", "\"\<Gaza\>\"", 
           ",", "\"\<, Fed. Sts.\>\"", ",", "\"\< SAR, China\>\"", ",", 
           "\"\< \>\""}], "}"}], "\[Rule]", "\"\<\>\""}]}], "]"}]}], "&"}], "/@", 
    RowBox[{"WDIfulldata", "[", 
     RowBox[{"[", 
      RowBox[{
       RowBox[{"2", ";;"}], ",", "1"}], "]"}], "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.707687526299098*^9, 3.707687552640629*^9}, {
   3.7076880434485116`*^9, 3.707688046271986*^9}, {3.7076881219709787`*^9, 
   3.707688125276391*^9}, {3.707688167253264*^9, 3.7076882596681747`*^9}, {
   3.7076883501093454`*^9, 3.7076884600211706`*^9}, {3.7076884965696297`*^9, 
   3.7076885578900595`*^9}, {3.7076885989015665`*^9, 
   3.7076886116615887`*^9}, {3.707688663941883*^9, 3.7076887607976527`*^9}, {
   3.707688840333879*^9, 3.70768887788068*^9}, {3.707689042366359*^9, 
   3.7076890605209093`*^9}, {3.7076891023220053`*^9, 3.707689148442237*^9}, {
   3.707689229686344*^9, 3.707689232857997*^9}, 3.707689292496046*^9, {
   3.707701825610595*^9, 3.707701859314781*^9}, 3.7077020028728175`*^9, {
   3.707702083870307*^9, 3.707702093462143*^9}, {3.707702231880971*^9, 
   3.707702284701044*^9}, {3.7077023330155835`*^9, 3.7077023400361624`*^9}, 
   3.707702384522335*^9, {3.7077024332694654`*^9, 3.7077024356262846`*^9}, {
   3.7077026383719893`*^9, 3.7077026446718845`*^9}, {3.707702966364056*^9, 
   3.707702968895369*^9}, {3.7077030964347196`*^9, 3.707703114638601*^9}, {
   3.707835156721267*^9, 3.7078351900285816`*^9}, {3.707835254762518*^9, 
   3.7078352567468233`*^9}, {3.7078398771217585`*^9, 
   3.7078398797248917`*^9}},ExpressionUUID->"87f265c9-7a03-4e75-ad20-\
5cce541d5e6a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"WDIcountryrules2", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\"\<CaboVerde\>\"", "\[Rule]", "\"\<CapeVerde\>\""}], ",", 
     RowBox[{"\"\<Coted'Ivoire\>\"", "->", "\"\<IvoryCoast\>\""}], ",", 
     RowBox[{"\"\<LaoDemocraticRepublic\>\"", "\[Rule]", "\"\<Laos\>\""}], 
     ",", 
     RowBox[{"\"\<Congo\>\"", "\[Rule]", "\"\<RepublicCongo\>\""}], ",", 
     RowBox[{
     "\"\<Congo,Dem.Rep.\>\"", "\[Rule]", "\"\<DemocraticRepublicCongo\>\""}],
      ",", 
     RowBox[{
     "\"\<DemocraticRepublicKorea\>\"", "\[Rule]", "\"\<SouthKorea\>\""}], 
     ",", 
     RowBox[{"\"\<RepublicMoldova\>\"", "\[Rule]", "\"\<Moldova\>\""}], ",", 
     RowBox[{"\"\<RepublicKorea\>\"", "\[Rule]", "\"\<NorthKorea\>\""}], ",", 
     
     RowBox[{"\"\<VietNam\>\"", "\[Rule]", "\"\<Vietnam\>\""}], ",", 
     RowBox[{"\"\<StatePalestine\>\"", "\[Rule]", "\"\<WestBank\>\""}], ",", 
     RowBox[{"\"\<Egypt,ArabRep.\>\"", "\[Rule]", "\"\<Egypt\>\""}], ",", 
     RowBox[{"\"\<Iran,IslamicRep.\>\"", "\[Rule]", "\"\<Iran\>\""}], ",", 
     RowBox[{"\"\<LaoPDR\>\"", "\[Rule]", "\"\<Laos\>\""}], ",", 
     RowBox[{
     "\"\<VirginIslands(U.S.)\>\"", "\[Rule]", 
      "\"\<UnitedStatesVirginIslands\>\""}], ",", 
     RowBox[{
     "\"\<SintMaarten(Dutchpart)\>\"", "\[Rule]", "\"\<SintMaarten\>\""}], 
     ",", 
     RowBox[{"\"\<SlovakRepublic\>\"", "\[Rule]", "\"\<Slovakia\>\""}], ",", 
     RowBox[{
     "\"\<St.Martin(Frenchpart)\>\"", "\[Rule]", "\"\<SanMarino\>\""}], ",", 
     RowBox[{"\"\<KyrgyzRepublic\>\"", "\[Rule]", "\"\<Kyrgyzstan\>\""}], ",", 
     RowBox[{"\"\<St.Lucia\>\"", "\[Rule]", "\"\<SaintLucia\>\""}], ",", 
     RowBox[{"\"\<St.KittsNevis\>\"", "\[Rule]", "\"\<SaintKittsNevis\>\""}], 
     ",", 
     RowBox[{
     "\"\<St.VincentGrenadines\>\"", "\[Rule]", 
      "\"\<SaintVincentGrenadines\>\""}], ",", 
     RowBox[{
     "\"\<Korea,Dem.People\[AHat]\.80\.99sRep.\>\"", "\[Rule]", 
      "\"\<NorthKorea\>\""}], ",", 
     RowBox[{"\"\<Korea\>\"", "\[Rule]", "\"\<SouthKorea\>\""}], ",", 
     RowBox[{"\"\<MacaoSAR,China\>\"", "\[Rule]", "\"\<Macau\>\""}], ",", 
     RowBox[{"\"\<IsleMan\>\"", "\[Rule]", "\"\<IsleOfMan\>\""}], ",", 
     RowBox[{"\"\<ChannelIslands\>\"", "\[Rule]", "\"\<CookIslands\>\""}]}], 
    "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.707688894807478*^9, 3.7076890276587286`*^9}, {
   3.7076891736419797`*^9, 3.707689184927518*^9}, {3.7076893737379427`*^9, 
   3.7076893753432446`*^9}, {3.707689437166299*^9, 3.7076894406280975`*^9}, {
   3.7076896514246855`*^9, 3.707689656823677*^9}, 3.7076909118760557`*^9, {
   3.7077018638199778`*^9, 3.7077018640219865`*^9}, {3.7077021328154263`*^9, 
   3.7077022207823486`*^9}, {3.70770234432533*^9, 3.707702354073615*^9}, {
   3.70770241774349*^9, 3.7077024594088297`*^9}, {3.7077024979453106`*^9, 
   3.7077025838923683`*^9}, {3.707702666194804*^9, 3.7077027625579987`*^9}, {
   3.707702858438263*^9, 3.7077028807124414`*^9}, {3.707703020289504*^9, 
   3.707703071816245*^9}, {3.7077031289102836`*^9, 3.707703138633472*^9}, {
   3.7078351665299506`*^9, 3.7078351938746214`*^9}, {3.707835250143236*^9, 
   3.707835252865077*^9}, {3.707943640505968*^9, 3.707943649061766*^9}, {
   3.7082095405210104`*^9, 
   3.7082095416233883`*^9}},ExpressionUUID->"881111d3-f4e3-4712-93f4-\
90d069b704e4"],

Cell["\<\
Process data so it is a matrix form with the first row of properties and the \
first column as country entities\
\>", "Text",
 CellChangeTimes->{{3.7079440497187977`*^9, 
  3.7079440840085163`*^9}},ExpressionUUID->"0b291fdd-d2e6-4dc3-9b5b-\
dfcfee9237b5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"WDIdata", "=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{"\"\<Countries\>\"", ",", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"WDIraw", "[", 
             RowBox[{"[", 
              RowBox[{"#", ",", "3"}], "]"}], "]"}], "}"}], "&"}], "/@", 
          RowBox[{"Range", "[", 
           RowBox[{"2", ",", 
            RowBox[{"Length", "[", 
             RowBox[{"WDIfulldata", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "]"}]}]}], "}"}], 
       "]"}], "}"}], ",", 
     RowBox[{"Replace", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"Flatten", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Entity", "[", 
             RowBox[{"\"\<Country\>\"", ",", 
              RowBox[{"#", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", 
            RowBox[{"#", "[", 
             RowBox[{"[", 
              RowBox[{"2", ";;"}], "]"}], "]"}]}], "}"}], "]"}], "&"}], "/@", 
        
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"WDIfulldata", "/.", "WDIcountryrules1"}], ")"}], "/.", 
           "WDIcountryrules2"}], ")"}], "[", 
         RowBox[{"[", 
          RowBox[{
           RowBox[{"2", ";;"}], ",", "All"}], "]"}], "]"}]}], ",", 
       RowBox[{"\"\<\>\"", "\[Rule]", 
        RowBox[{"Missing", "[", "]"}]}], ",", 
       RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7077015953568115`*^9, 3.70770162347705*^9}, {
   3.707701677638742*^9, 3.70770174598237*^9}, 3.7077040673454556`*^9, {
   3.7078352114572735`*^9, 3.7078352598676014`*^9}, {3.7078357525065556`*^9, 
   3.7078358141649055`*^9}, {3.7078396600124054`*^9, 3.7078396982649584`*^9}, 
   3.7078399197502604`*^9, 3.707840794227455*^9, 3.7078446360592117`*^9, 
   3.7078450386112375`*^9, {3.707845321394991*^9, 3.707845339768858*^9}, {
   3.707845598079037*^9, 3.7078456390519934`*^9}, {3.707845670183014*^9, 
   3.7078457237950172`*^9}, {3.707845758855669*^9, 3.7078457689065204`*^9}, {
   3.7078529973027625`*^9, 3.707853050198599*^9}, {3.7078530823248315`*^9, 
   3.707853090116897*^9}, {3.707853131709219*^9, 3.7078531338856544`*^9}, {
   3.7078535032790337`*^9, 3.707853518321906*^9}, {3.7078535588508167`*^9, 
   3.70785357672808*^9}, {3.7078536170609865`*^9, 3.7078536377592893`*^9}, {
   3.707853705539797*^9, 3.707853753904544*^9}, {3.7078543516131277`*^9, 
   3.7078543544076757`*^9}, 3.707854668006277*^9, {3.7078598352378435`*^9, 
   3.7078598373582754`*^9}, 
   3.707943813451394*^9},ExpressionUUID->"7d30962a-a784-4419-a6b5-\
a6203de34174"],

Cell["\<\
Remove all property columns that have more than 100 data points missing\
\>", "Text",
 CellChangeTimes->{{3.707944088710291*^9, 
  3.7079441143068357`*^9}},ExpressionUUID->"7f17abbf-4868-480d-8072-\
1ffa5cd9e480"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"WDIdataclean", "=", 
  RowBox[{"Transpose", "[", 
   RowBox[{"Select", "[", 
    RowBox[{
     RowBox[{"Transpose", "[", "WDIdata", "]"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"Count", "[", 
        RowBox[{"#", ",", "_Missing"}], "]"}], "<", "100"}], "&"}]}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7078533895769653`*^9, 3.707853401150104*^9}, 
   3.70785466158496*^9, 
   3.7079777697569485`*^9},ExpressionUUID->"24b68e86-40d4-46c0-bd77-\
fe97663fd3ba"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            
            RowBox[{"\<\"Countries\"\>", 
             ",", "\<\"Access to clean fuels and technologies for cooking  (% \
of population)\"\>", ",", "\<\"Access to electricity (% of population)\"\>", 
             ",", "\<\"Access to electricity, rural (% of rural population)\"\
\>", ",", "\<\"Access to electricity, urban (% of urban population)\"\>", 
             ",", "\<\"Adjusted net enrollment rate, primary (% of primary \
school age children)\"\>", 
             ",", "\<\"Adjusted net national income (annual % growth)\"\>", 
             ",", 
             TemplateBox[{"897"},
              "OutputSizeLimit`Skeleton"], 
             ",", "\<\"Unemployment, youth male (% of male labor force ages \
15-24) (modeled ILO estimate)\"\>", 
             ",", "\<\"Unemployment, youth total (% of total labor force ages \
15-24) (modeled ILO estimate)\"\>", ",", "\<\"Urban population\"\>", 
             ",", "\<\"Urban population (% of total)\"\>", 
             ",", "\<\"Urban population growth (annual %)\"\>", 
             ",", "\<\"Use of IMF credit (DOD, current US$)\"\>"}], "}"}], 
           ",", 
           TemplateBox[{"215"},
            "OutputSizeLimit`Skeleton"], ",", 
           RowBox[{"{", 
            RowBox[{
             TemplateBox[{"\"Zimbabwe\"",RowBox[{"Entity", "[", 
                 RowBox[{"\"Country\"", ",", "\"Zimbabwe\""}], "]"}],
               "\"Entity[\\\"Country\\\", \\\"Zimbabwe\\\"]\"","\"country\""},
              
              "Entity"], ",", "31.09925985`", ",", 
             TemplateBox[{"906"},
              "OutputSizeLimit`Skeleton"], ",", "1.708154712`", ",", 
             "519342000"}], "}"}]}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{65., {3., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{52., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 8, 15635245805294949239, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{62., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{62., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 8, 15635245805294949239, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{44., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 8, 15635245805294949239, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{78., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{78., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[15635245805294949239 === $SessionID, 
   Out[8], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{
  3.708250682808793*^9},ExpressionUUID->"51e1d03e-0cf6-4191-9c0e-\
7def8eaab5b3"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"WDIdataPercent", "=", 
   RowBox[{"Transpose", "[", 
    RowBox[{"Prepend", "[", 
     RowBox[{
      RowBox[{"DeleteCases", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"StringContainsQ", "[", 
             RowBox[{
              RowBox[{"#", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", "\"\<%\>\""}], "]"}], ",",
             " ", 
            RowBox[{"Flatten", "[", 
             RowBox[{"Append", "[", 
              RowBox[{
               RowBox[{"{", "}"}], ",", "#"}], "]"}], "]"}]}], "]"}], "&"}], "/@", 
         RowBox[{"Transpose", "[", "WDIdataclean", "]"}]}], ",", 
        RowBox[{"Missing", "[", "]"}]}], "]"}], ",", 
      RowBox[{
       RowBox[{"Transpose", "[", "WDIdataclean", "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7079760885906677`*^9, 3.707976096566015*^9}, {
   3.70797641057343*^9, 3.7079764909623237`*^9}, {3.707977632399572*^9, 
   3.7079776630142365`*^9}, {3.7079777934894853`*^9, 
   3.7079778057353287`*^9}, {3.707977864227294*^9, 3.707977942809596*^9}, {
   3.7080282875494823`*^9, 3.7080282888325543`*^9}, 
   3.7081437091646137`*^9},ExpressionUUID->"bafac87f-e8fc-465e-af31-\
e3af99d6eef1"],

Cell["Create a list of regions to be used in the visualization", "Text",
 CellChangeTimes->{{3.707944123774943*^9, 
  3.7079441540161686`*^9}},ExpressionUUID->"9aa943b9-afcd-4495-a356-\
8dfa862e2db0"],

Cell[BoxData[
 RowBox[{"AssociationMap", "[", 
  NamespaceBox["LinguisticAssistant",
   DynamicModuleBox[{Typeset`query$$ = "Albania", Typeset`boxes$$ = 
    TemplateBox[{"\"Albania\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Country\"", ",", "\"Albania\""}], "]"}], 
      "\"Entity[\\\"Country\\\", \\\"Albania\\\"]\"", "\"country\""}, 
     "Entity"], 
    Typeset`allassumptions$$ = {{
     "type" -> "Clash", "word" -> "Albania", "template" -> 
      "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> 
      "2", "Values" -> {{
        "name" -> "Country", "desc" -> "a country", "input" -> 
         "*C.Albania-_*Country-"}, {
        "name" -> "AdministrativeDivision", "desc" -> 
         "an administrative division", "input" -> 
         "*C.Albania-_*AdministrativeDivision-"}}}}, 
    Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, 
    Typeset`querystate$$ = {
    "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
     0.4643547`7.118394839145579, "Messages" -> {}}}, 
    DynamicBox[ToBoxes[
      AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
       Dynamic[Typeset`query$$], 
       Dynamic[Typeset`boxes$$], 
       Dynamic[Typeset`allassumptions$$], 
       Dynamic[Typeset`assumptions$$], 
       Dynamic[Typeset`open$$], 
       Dynamic[Typeset`querystate$$]], StandardForm],
     ImageSizeCache->{159., {7., 17.}},
     TrackedSymbols:>{
      Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
       Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
    DynamicModuleValues:>{},
    UndoTrackedVariables:>{Typeset`open$$}],
   BaseStyle->{"Deploy"},
   DeleteWithContents->True,
   Editable->False,
   SelectWithContents->True], "]"}]], "Input",
 CellChangeTimes->{{3.708190433992276*^9, 
  3.7081904444263487`*^9}},ExpressionUUID->"bfbee5f5-cc92-4bae-84e3-\
8e8c9bb951ed"],

Cell[BoxData[
 RowBox[{
  RowBox[{"continentCountries", "=", 
   RowBox[{"AssociationMap", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"#", "[", "\"\<Entity\>\"", "]"}], "&"}], ",", 
     RowBox[{"{", 
      RowBox[{
       NamespaceBox["LinguisticAssistant",
        DynamicModuleBox[{Typeset`query$$ = "europe", Typeset`boxes$$ = 
         TemplateBox[{"\"Europe\"", 
           RowBox[{"EntityClass", "[", 
             RowBox[{"\"Country\"", ",", "\"Europe\""}], "]"}], 
           "\"EntityClass[\\\"Country\\\", \\\"Europe\\\"]\"", 
           "\"countries\""}, "EntityClass"], 
         Typeset`allassumptions$$ = {{
          "type" -> "Clash", "word" -> "europe", "template" -> 
           "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", 
           "count" -> "3", 
           "Values" -> {{
             "name" -> "CountryClass", "desc" -> "a class of countries", 
              "input" -> "*C.europe-_*CountryClass-"}, {
             "name" -> "GeographicRegion", "desc" -> "a continent", "input" -> 
              "*C.europe-_*GeographicRegion-"}, {
             "name" -> "Word", "desc" -> "a word", "input" -> 
              "*C.europe-_*Word-"}}}, {
          "type" -> "SubCategory", "word" -> "europe", "template" -> 
           "Assuming ${desc1}. Use ${desc2} instead", "count" -> "4", 
           "Values" -> {{
             "name" -> "Europe", "desc" -> "Europe", "input" -> 
              "*DPClash.CountryEC.europe-_*Europe-"}, {
             "name" -> "EuropeSovereign", "desc" -> 
              "sovereign states in Europe", "input" -> 
              "*DPClash.CountryEC.europe-_*EuropeSovereign-"}, {
             "name" -> "EuropeExtended", "desc" -> 
              "Europe with Russia and Turkey", "input" -> 
              "*DPClash.CountryEC.europe-_*EuropeExtended-"}, {
             "name" -> "EuropeRussia", "desc" -> "Europe with Russia", 
              "input" -> "*DPClash.CountryEC.europe-_*EuropeRussia-"}}}}, 
         Typeset`assumptions$$ = {"*C.europe-_*CountryClass-"}, 
         Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {
         "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
          0.779952`6.343612869549814, "Messages" -> {}}}, 
         DynamicBox[ToBoxes[
           AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
            Dynamic[Typeset`query$$], 
            Dynamic[Typeset`boxes$$], 
            Dynamic[Typeset`allassumptions$$], 
            Dynamic[Typeset`assumptions$$], 
            Dynamic[Typeset`open$$], 
            Dynamic[Typeset`querystate$$]], StandardForm],
          ImageSizeCache->{176., {7., 17.}},
          
          TrackedSymbols:>{
           Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
            Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
         DynamicModuleValues:>{},
         UndoTrackedVariables:>{Typeset`open$$}],
        BaseStyle->{"Deploy"},
        DeleteWithContents->True,
        Editable->False,
        SelectWithContents->True], ",", 
       NamespaceBox["LinguisticAssistant",
        DynamicModuleBox[{Typeset`query$$ = "south americ", Typeset`boxes$$ = 
         TemplateBox[{"\"South America\"", 
           RowBox[{"EntityClass", "[", 
             RowBox[{"\"Country\"", ",", "\"SouthAmerica\""}], "]"}], 
           "\"EntityClass[\\\"Country\\\", \\\"SouthAmerica\\\"]\"", 
           "\"countries\""}, "EntityClass"], 
         Typeset`allassumptions$$ = {{
          "type" -> "Clash", "word" -> "south americ", "template" -> 
           "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", 
           "count" -> "2", 
           "Values" -> {{
             "name" -> "CountryClass", "desc" -> "a class of countries", 
              "input" -> "*C.south+americ-_*CountryClass-"}, {
             "name" -> "GeographicRegion", "desc" -> "a continent", "input" -> 
              "*C.south+americ-_*GeographicRegion-"}}}}, 
         Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, 
         Typeset`querystate$$ = {
         "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
          0.906752`6.4090335156618785, "Messages" -> {}}}, 
         DynamicBox[ToBoxes[
           AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
            Dynamic[Typeset`query$$], 
            Dynamic[Typeset`boxes$$], 
            Dynamic[Typeset`allassumptions$$], 
            Dynamic[Typeset`assumptions$$], 
            Dynamic[Typeset`open$$], 
            Dynamic[Typeset`querystate$$]], StandardForm],
          ImageSizeCache->{225., {7., 17.}},
          
          TrackedSymbols:>{
           Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
            Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
         DynamicModuleValues:>{},
         UndoTrackedVariables:>{Typeset`open$$}],
        BaseStyle->{"Deploy"},
        DeleteWithContents->True,
        Editable->False,
        SelectWithContents->True], ",", 
       NamespaceBox["LinguisticAssistant",
        DynamicModuleBox[{Typeset`query$$ = "north america", Typeset`boxes$$ =
          TemplateBox[{"\"North America\"", 
           RowBox[{"EntityClass", "[", 
             RowBox[{"\"Country\"", ",", "\"NorthAmerica\""}], "]"}], 
           "\"EntityClass[\\\"Country\\\", \\\"NorthAmerica\\\"]\"", 
           "\"countries\""}, "EntityClass"], 
         Typeset`allassumptions$$ = {{
          "type" -> "Clash", "word" -> "north america", "template" -> 
           "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", 
           "count" -> "3", 
           "Values" -> {{
             "name" -> "CountryClass", "desc" -> "a class of countries", 
              "input" -> "*C.north+america-_*CountryClass-"}, {
             "name" -> "GeographicRegion", "desc" -> "a continent", "input" -> 
              "*C.north+america-_*GeographicRegion-"}, {
             "name" -> "City", "desc" -> "a city", "input" -> 
              "*C.north+america-_*City-"}}}}, Typeset`assumptions$$ = {
         "*C.north+america-_*CountryClass-"}, Typeset`open$$ = {1, 2}, 
         Typeset`querystate$$ = {
         "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
          0.620869`6.244544969552231, "Messages" -> {}}}, 
         DynamicBox[ToBoxes[
           AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
            Dynamic[Typeset`query$$], 
            Dynamic[Typeset`boxes$$], 
            Dynamic[Typeset`allassumptions$$], 
            Dynamic[Typeset`assumptions$$], 
            Dynamic[Typeset`open$$], 
            Dynamic[Typeset`querystate$$]], StandardForm],
          ImageSizeCache->{222., {7., 17.}},
          
          TrackedSymbols:>{
           Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
            Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
         DynamicModuleValues:>{},
         UndoTrackedVariables:>{Typeset`open$$}],
        BaseStyle->{"Deploy"},
        DeleteWithContents->True,
        Editable->False,
        SelectWithContents->True], ",", 
       NamespaceBox["LinguisticAssistant",
        DynamicModuleBox[{Typeset`query$$ = "ocenia", Typeset`boxes$$ = 
         TemplateBox[{"\"Oceania\"", 
           RowBox[{"EntityClass", "[", 
             RowBox[{"\"Country\"", ",", "\"Oceania\""}], "]"}], 
           "\"EntityClass[\\\"Country\\\", \\\"Oceania\\\"]\"", 
           "\"countries\""}, "EntityClass"], 
         Typeset`allassumptions$$ = {{
          "type" -> "Clash", "word" -> "ocenia", "template" -> 
           "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", 
           "count" -> "7", 
           "Values" -> {{
             "name" -> "CountryClass", "desc" -> "a class of countries", 
              "input" -> "*C.ocenia-_*CountryClass-"}, {
             "name" -> "Building", "desc" -> "a structure", "input" -> 
              "*C.ocenia-_*Building-"}, {
             "name" -> "Language", "desc" -> "a language", "input" -> 
              "*C.ocenia-_*Language-"}, {
             "name" -> "LanguageClass", "desc" -> "a class of languages", 
              "input" -> "*C.ocenia-_*LanguageClass-"}, {
             "name" -> "Movie", "desc" -> "a movie", "input" -> 
              "*C.ocenia-_*Movie-"}, {
             "name" -> "Plant", "desc" -> "a plant", "input" -> 
              "*C.ocenia-_*Plant-"}, {
             "name" -> "Word", "desc" -> "a word", "input" -> 
              "*C.ocenia-_*Word-"}}}}, Typeset`assumptions$$ = {}, 
         Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {
         "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
          0.696041`6.294179815792335, "Messages" -> {}}}, 
         DynamicBox[ToBoxes[
           AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
            Dynamic[Typeset`query$$], 
            Dynamic[Typeset`boxes$$], 
            Dynamic[Typeset`allassumptions$$], 
            Dynamic[Typeset`assumptions$$], 
            Dynamic[Typeset`open$$], 
            Dynamic[Typeset`querystate$$]], StandardForm],
          ImageSizeCache->{184., {7., 17.}},
          
          TrackedSymbols:>{
           Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
            Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
         DynamicModuleValues:>{},
         UndoTrackedVariables:>{Typeset`open$$}],
        BaseStyle->{"Deploy"},
        DeleteWithContents->True,
        Editable->False,
        SelectWithContents->True], ",", 
       NamespaceBox["LinguisticAssistant",
        DynamicModuleBox[{Typeset`query$$ = "asia", Typeset`boxes$$ = 
         TemplateBox[{"\"Asia\"", 
           RowBox[{"EntityClass", "[", 
             RowBox[{"\"Country\"", ",", "\"Asia\""}], "]"}], 
           "\"EntityClass[\\\"Country\\\", \\\"Asia\\\"]\"", "\"countries\""},
           "EntityClass"], 
         Typeset`allassumptions$$ = {{
          "type" -> "Clash", "word" -> "asia", "template" -> 
           "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", 
           "count" -> "4", 
           "Values" -> {{
             "name" -> "CountryClass", "desc" -> "a class of countries", 
              "input" -> "*C.asia-_*CountryClass-"}, {
             "name" -> "GeographicRegion", "desc" -> "a continent", "input" -> 
              "*C.asia-_*GeographicRegion-"}, {
             "name" -> "GivenName", "desc" -> "a given name", "input" -> 
              "*C.asia-_*GivenName-"}, {
             "name" -> "TranslationData", "desc" -> 
              " referring to translations", "input" -> 
              "*C.asia-_*TranslationData-"}}}}, Typeset`assumptions$$ = {
         "*C.asia-_*CountryClass-"}, Typeset`open$$ = {1, 2}, 
         Typeset`querystate$$ = {
         "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
          0.453439`6.108063864285107, "Messages" -> {}}}, 
         DynamicBox[ToBoxes[
           AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
            Dynamic[Typeset`query$$], 
            Dynamic[Typeset`boxes$$], 
            Dynamic[Typeset`allassumptions$$], 
            Dynamic[Typeset`assumptions$$], 
            Dynamic[Typeset`open$$], 
            Dynamic[Typeset`querystate$$]], StandardForm],
          ImageSizeCache->{158., {7., 17.}},
          
          TrackedSymbols:>{
           Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
            Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
         DynamicModuleValues:>{},
         UndoTrackedVariables:>{Typeset`open$$}],
        BaseStyle->{"Deploy"},
        DeleteWithContents->True,
        Editable->False,
        SelectWithContents->True], ",", 
       NamespaceBox["LinguisticAssistant",
        DynamicModuleBox[{Typeset`query$$ = "africa", Typeset`boxes$$ = 
         TemplateBox[{"\"Africa\"", 
           RowBox[{"EntityClass", "[", 
             RowBox[{"\"Country\"", ",", "\"Africa\""}], "]"}], 
           "\"EntityClass[\\\"Country\\\", \\\"Africa\\\"]\"", 
           "\"countries\""}, "EntityClass"], 
         Typeset`allassumptions$$ = {{
          "type" -> "Clash", "word" -> "africa", "template" -> 
           "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", 
           "count" -> "3", 
           "Values" -> {{
             "name" -> "CountryClass", "desc" -> "a class of countries", 
              "input" -> "*C.africa-_*CountryClass-"}, {
             "name" -> "GeographicRegion", "desc" -> "a continent", "input" -> 
              "*C.africa-_*GeographicRegion-"}, {
             "name" -> "GivenName", "desc" -> "a given name", "input" -> 
              "*C.africa-_*GivenName-"}}}}, Typeset`assumptions$$ = {
         "*C.africa-_*CountryClass-"}, Typeset`open$$ = {1, 2}, 
         Typeset`querystate$$ = {
         "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
          0.594408`6.225629639356964, "Messages" -> {}}}, 
         DynamicBox[ToBoxes[
           AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
            Dynamic[Typeset`query$$], 
            Dynamic[Typeset`boxes$$], 
            Dynamic[Typeset`allassumptions$$], 
            Dynamic[Typeset`assumptions$$], 
            Dynamic[Typeset`open$$], 
            Dynamic[Typeset`querystate$$]], StandardForm],
          ImageSizeCache->{168., {7., 17.}},
          
          TrackedSymbols:>{
           Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
            Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
         DynamicModuleValues:>{},
         UndoTrackedVariables:>{Typeset`open$$}],
        BaseStyle->{"Deploy"},
        DeleteWithContents->True,
        Editable->False,
        SelectWithContents->True]}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.707861082822668*^9, 3.7078611535298443`*^9}, {
   3.7079433911940317`*^9, 3.7079433934106894`*^9}, 3.708190418844568*^9, 
   3.7081918841506643`*^9},ExpressionUUID->"a3808d5e-7bc6-4b3c-9a0f-\
80337679c4db"],

Cell[BoxData[
 RowBox[{
  RowBox[{"countriesContinent", "=", 
   RowBox[{"Association", "@", 
    RowBox[{"Flatten", "[", 
     RowBox[{
      RowBox[{"KeyValueMap", "[", 
       RowBox[{
        RowBox[{"Function", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"key", ",", "val"}], "}"}], ",", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"#", "\[Rule]", "key"}], ")"}], "&"}], ",", " ", 
            "val"}], " ", "]"}]}], "]"}], ",", "continentCountries"}], "]"}], 
      ",", "Infinity"}], "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7078627360387383`*^9, 
  3.7078631304125137`*^9}},ExpressionUUID->"48f600bf-f9fc-4b1e-ad50-\
e145db2e2a31"],

Cell["\<\
Process data so it is a series of associations from Property to Region to \
Country to Value\
\>", "Text",
 CellChangeTimes->{{3.7079441739737415`*^9, 3.707944207131467*^9}, {
  3.7079442718256087`*^9, 
  3.7079442829884124`*^9}},ExpressionUUID->"1004d27c-5451-49bb-8f7c-\
48c1ebd64ce9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataAsso", "=", 
   RowBox[{"AssociationThread", "[", 
    RowBox[{
     RowBox[{"WDIdataclean", "[", 
      RowBox[{"[", 
       RowBox[{"1", ",", 
        RowBox[{"2", ";;"}]}], "]"}], "]"}], ",", 
     RowBox[{"Transpose", "[", 
      RowBox[{"Map", "[", 
       RowBox[{"Thread", ",", 
        RowBox[{"MapThread", "[", 
         RowBox[{"Rule", ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"WDIdataclean", "[", 
             RowBox[{"[", 
              RowBox[{
               RowBox[{"2", ";;"}], ",", "1"}], "]"}], "]"}], ",", 
            RowBox[{"WDIdataclean", "[", 
             RowBox[{"[", 
              RowBox[{
               RowBox[{"2", ";;"}], ",", 
               RowBox[{"2", ";;"}]}], "]"}], "]"}]}], "}"}]}], "]"}]}], "]"}],
       "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7078616799080067`*^9, 3.707861683178528*^9}, {
  3.707861745129694*^9, 3.707861821336138*^9}, {3.707861853636345*^9, 
  3.7078618877937717`*^9}, {3.707861970899056*^9, 3.707861987785997*^9}, {
  3.707862063667997*^9, 3.707862155520995*^9}, {3.707862192902895*^9, 
  3.707862234440897*^9}, {3.70786232169785*^9, 3.707862338100905*^9}, {
  3.7078624302135*^9, 3.707862438397564*^9}, {3.70786247597504*^9, 
  3.7078625039667187`*^9}, {3.70794388338323*^9, 3.7079438949193397`*^9}, {
  3.707977738900299*^9, 3.7079777468990335`*^9}, {3.7079780109630194`*^9, 
  3.707978020777726*^9}, {3.708028475168115*^9, 
  3.7080284888524895`*^9}},ExpressionUUID->"94a3f59d-7c61-463f-bd7e-\
ec4e6e5212e9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataAsso", "=", 
   RowBox[{"Map", "[", 
    RowBox[{"Association", ",", "dataAsso"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.707862461528103*^9, 3.7078624896304893`*^9}, {
  3.707862524848749*^9, 3.707862534468708*^9}, {3.7079449397066154`*^9, 
  3.7079449412193346`*^9}},ExpressionUUID->"d4849120-cea5-4ba3-932c-\
f0e1cbbc5a67"],

Cell[BoxData[
 RowBox[{"CityData", "[", 
  RowBox[{
   NamespaceBox["LinguisticAssistant",
    DynamicModuleBox[{Typeset`query$$ = "London", Typeset`boxes$$ = 
     TemplateBox[{"\"London\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"City\"", ",", 
           RowBox[{"{", 
             
             RowBox[{"\"London\"", ",", "\"GreaterLondon\"", ",", 
               "\"UnitedKingdom\""}], "}"}]}], "]"}], 
       "\"Entity[\\\"City\\\", {\\\"London\\\", \\\"GreaterLondon\\\", \
\\\"UnitedKingdom\\\"}]\"", "\"city\""}, "Entity"], 
     Typeset`allassumptions$$ = {{
      "type" -> "Clash", "word" -> "London", "template" -> 
       "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> 
       "4", "Values" -> {{
         "name" -> "City", "desc" -> "a city", "input" -> 
          "*C.London-_*City-"}, {
         "name" -> "AdministrativeDivision", "desc" -> 
          "an administrative division", "input" -> 
          "*C.London-_*AdministrativeDivision-"}, {
         "name" -> "Surname", "desc" -> "a surname", "input" -> 
          "*C.London-_*Surname-"}, {
         "name" -> "GivenName", "desc" -> "a given name", "input" -> 
          "*C.London-_*GivenName-"}}}, {
      "type" -> "SubCategory", "word" -> "London", "template" -> 
       "Assuming ${desc1}. Use ${desc2} instead", "count" -> "7", 
       "Values" -> {{
         "name" -> "{London, GreaterLondon, UnitedKingdom}", "desc" -> 
          "London (United Kingdom)", "input" -> 
          "*DPClash.CityE.London-_**London.GreaterLondon.UnitedKingdom--"}, {
         "name" -> "{London, Ontario, Canada}", "desc" -> "London (Canada)", 
          "input" -> "*DPClash.CityE.London-_**London.Ontario.Canada--"}, {
         "name" -> "{London, Ohio, UnitedStates}", "desc" -> 
          "London (Ohio, USA)", "input" -> 
          "*DPClash.CityE.London-_**London.Ohio.UnitedStates--"}, {
         "name" -> "{London, Kentucky, UnitedStates}", "desc" -> 
          "London (Kentucky, USA)", "input" -> 
          "*DPClash.CityE.London-_**London.Kentucky.UnitedStates--"}, {
         "name" -> "{London, Arkansas, UnitedStates}", "desc" -> 
          "London (Arkansas, USA)", "input" -> 
          "*DPClash.CityE.London-_**London.Arkansas.UnitedStates--"}, {
         "name" -> "{London, California, UnitedStates}", "desc" -> 
          "London (California, USA)", "input" -> 
          "*DPClash.CityE.London-_**London.California.UnitedStates--"}, {
         "name" -> "{London, Kiritimati, Kiribati}", "desc" -> 
          "London (Kiribati)", "input" -> 
          "*DPClash.CityE.London-_**London.Kiritimati.Kiribati--"}}}}, 
     Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, 
     Typeset`querystate$$ = {
     "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
      0.6272256`7.248968769115986, "Messages" -> {}}}, 
     DynamicBox[ToBoxes[
       AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
        Dynamic[Typeset`query$$], 
        Dynamic[Typeset`boxes$$], 
        Dynamic[Typeset`allassumptions$$], 
        Dynamic[Typeset`assumptions$$], 
        Dynamic[Typeset`open$$], 
        Dynamic[Typeset`querystate$$]], StandardForm],
      ImageSizeCache->{136., {7., 17.}},
      TrackedSymbols:>{
       Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
        Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
     DynamicModuleValues:>{},
     UndoTrackedVariables:>{Typeset`open$$}],
    BaseStyle->{"Deploy"},
    DeleteWithContents->True,
    Editable->False,
    SelectWithContents->True], ",", "\"\<Country\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.7081917172706175`*^9, 3.7081917445680285`*^9}, {
  3.7081917966563473`*^9, 
  3.7081918048913207`*^9}},ExpressionUUID->"5bf031d7-2aa0-434b-a119-\
1b78f882dc59"],

Cell[BoxData[
 RowBox[{
  RowBox[{"newDataAsso", "=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{
       RowBox[{"{", "propValues", "}"}], ",", 
       RowBox[{"Map", "[", 
        RowBox[{"Association", ",", 
         RowBox[{"GroupBy", "[", 
          RowBox[{
           RowBox[{"Normal", "@", "propValues"}], ",", 
           RowBox[{
            RowBox[{"countriesContinent", "[", 
             RowBox[{"First", "@", "#"}], "]"}], "&"}]}], "]"}]}], "]"}]}], 
      "]"}], ",", 
     RowBox[{"Map", "[", 
      RowBox[{"Association", ",", "dataAsso"}], "]"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.707862557559124*^9, 3.707862675697412*^9}, 
   3.707862708966178*^9, {3.707863149175424*^9, 3.7078631634319973`*^9}, {
   3.7078632634867353`*^9, 3.70786327823552*^9}, {3.70786336959268*^9, 
   3.707863493364532*^9}, 
   3.7079433335265894`*^9},ExpressionUUID->"0fc9d929-78f6-437b-b3ec-\
0e7c7b19d5df"],

Cell[BoxData[
 RowBox[{
  RowBox[{"properties", "=", 
   RowBox[{"Association", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"#", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "\[Rule]", 
       RowBox[{"#", "[", 
        RowBox[{"[", 
         RowBox[{"2", ";;"}], "]"}], "]"}]}], "&"}], "/@", 
     RowBox[{"Transpose", "[", 
      RowBox[{"WDIdataclean", "[", 
       RowBox[{"[", 
        RowBox[{
         RowBox[{"1", ";;"}], ",", 
         RowBox[{"2", ";;"}]}], "]"}], "]"}], "]"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{
  3.7081816789801044`*^9},ExpressionUUID->"956b9924-1398-4547-95ca-\
edd475239fb2"],

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"CorrelationTest", "[", 
    RowBox[{"DeleteMissing", "[", 
     RowBox[{
      RowBox[{"Transpose", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Rest", "[", 
          RowBox[{"properties", "[", "Property1", "]"}], "]"}], ",", 
         RowBox[{"Rest", "[", 
          RowBox[{"properties", "[", "Property2", "]"}], "]"}]}], "}"}], 
       "]"}], ",", "1", ",", "2"}], "]"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"Property1", ",", 
     RowBox[{"Keys", "@", "properties"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"Property2", ",", 
     RowBox[{"Keys", "@", "properties"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.708182335618577*^9, 
  3.708182348029834*^9}},ExpressionUUID->"82516ae8-8df7-4acd-87e7-\
c4166ed24a04"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"unitSplitStep", "[", 
    RowBox[{"s_", ",", "del_", ",", 
     RowBox[{"end_:", " ", "\"\<~~~Woo~~~\>\""}]}], "]"}], ":=", 
   RowBox[{"Replace", "[", 
    RowBox[{
     RowBox[{"StringSplit", "[", 
      RowBox[{"s", ",", "del", ",", "2"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"_", ",", "u_"}], "}"}], "\[RuleDelayed]", 
        RowBox[{"StringTrim", "@", 
         RowBox[{"First", "@", 
          RowBox[{"StringSplit", "[", 
           RowBox[{"u", ",", "end"}], "]"}]}]}]}], ",", 
       RowBox[{"_", "\[Rule]", "False"}]}], "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"unitSplit", "[", 
   RowBox[{"s_", ",", 
    RowBox[{"reps", ":", 
     RowBox[{"{", "__List", "}"}], ":", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<(\>\"", ",", "\"\<)\>\""}], "}"}], ",", 
       RowBox[{"{", "\"\<,\>\"", "}"}]}], "}"}]}]}], "]"}], ":=", 
  RowBox[{"FirstCase", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"unitSplitStep", "[", 
       RowBox[{"s", ",", 
        RowBox[{"Sequence", "@@", "#"}]}], "]"}], "&"}], "/@", "reps"}], ",", 
    "_String", ",", "s"}], "]"}]}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.7081777616146984`*^9, 3.7081777730276127`*^9}, {
  3.708177864382934*^9, 
  3.7081778679973145`*^9}},ExpressionUUID->"963fad9e-e5e3-4192-9b13-\
fa28a6078220"],

Cell["\<\
To see all the data at once, we can use a GeoRegionValuePlot with parameters \
of region and metric. The histogram allows us to understand the distribution \
across the selected region.\
\>", "Text",
 CellChangeTimes->{{3.7079445415259094`*^9, 
  3.707944586808663*^9}},ExpressionUUID->"2de10fcc-ef77-4283-881e-\
3889b6364ff6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"elements", "=", 
  RowBox[{"{", 
   RowBox[{
   "1", ",", "2", ",", "4", ",", "6", ",", "34", ",", "52", ",", "96", ",", 
    "156", ",", "195", ",", "199", ",", "229", ",", "230", ",", "245", ",", 
    "254", ",", "257", ",", "267", ",", "271", ",", "280", ",", "339", ",", 
    "345", ",", "355", ",", "379", ",", "387", ",", "390", ",", "394", ",", 
    "455", ",", "456", ",", "500", ",", "508", ",", "651", ",", "652", ",", 
    "737", ",", "781", ",", "902"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.7082527767996583`*^9, 3.7082527813567815`*^9}, {
  3.708252877048215*^9, 3.7082529635550084`*^9}, {3.708256768177024*^9, 
  3.708256768797506*^9}},ExpressionUUID->"f8a34399-b7f9-44df-9589-\
bfcccead387e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "4", ",", "6", ",", "34", ",", "52", ",", "96", ",", 
   "156", ",", "195", ",", "199", ",", "229", ",", "230", ",", "245", ",", 
   "254", ",", "257", ",", "267", ",", "271", ",", "280", ",", "339", ",", 
   "345", ",", "355", ",", "379", ",", "387", ",", "390", ",", "394", ",", 
   "455", ",", "456", ",", "500", ",", "508", ",", "651", ",", "652", ",", 
   "737", ",", "781", ",", "902"}], "}"}]], "Output",
 CellChangeTimes->{
  3.708252967104331*^9, {3.7082567444434924`*^9, 
   3.708256769640258*^9}},ExpressionUUID->"088d086c-7019-4cdf-af1c-\
6e9cdeeb9377"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"corrMat", "=", 
   RowBox[{"Array", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"#1", "<=", "#2"}], ",", "Infinity", ",", 
        RowBox[{"CorrelationTest", "[", 
         RowBox[{"DeleteMissing", "[", 
          RowBox[{
           RowBox[{"Transpose", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"properties", "[", 
               RowBox[{"[", 
                RowBox[{"elements", "[", 
                 RowBox[{"[", "#1", "]"}], "]"}], "]"}], "]"}], ",", 
              RowBox[{"properties", "[", 
               RowBox[{"[", 
                RowBox[{"elements", "[", 
                 RowBox[{"[", "#2", "]"}], "]"}], "]"}], "]"}]}], "}"}], 
            "]"}], ",", "1", ",", "2"}], "]"}], "]"}]}], "]"}], "&"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Length", "[", "elements", "]"}], ",", 
       RowBox[{"Length", "[", "elements", "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7079674614128904`*^9, 3.70796746760728*^9}, {
   3.7079675032148495`*^9, 3.7079676352150726`*^9}, {3.7079677329447823`*^9, 
   3.70796773750488*^9}, {3.707967771761526*^9, 3.7079678062760825`*^9}, {
   3.70796785107064*^9, 3.707967860309692*^9}, 3.707967906213293*^9, {
   3.7079679601889257`*^9, 3.707968061890211*^9}, {3.7079681431408935`*^9, 
   3.7079681557261047`*^9}, 3.70796821792689*^9, {3.707968480088484*^9, 
   3.707968531723686*^9}, {3.707968587713003*^9, 3.7079685879598837`*^9}, {
   3.7079697683062363`*^9, 3.7079697941940985`*^9}, 3.708028630404343*^9, {
   3.7081017489653325`*^9, 3.708101751508611*^9}, {3.7081024656686707`*^9, 
   3.708102496723613*^9}, {3.7082525103630314`*^9, 3.7082525294446545`*^9}, 
   3.7082525679838552`*^9, {3.7082527222542553`*^9, 3.708252724829097*^9}, {
   3.70825276139624*^9, 3.7082527697001467`*^9}, {3.7082530915020795`*^9, 
   3.7082530999866433`*^9}, {3.7082537568047*^9, 3.7082537682955036`*^9}, {
   3.7082538052650642`*^9, 
   3.7082538063067713`*^9}},ExpressionUUID->"a42a61ed-3b93-488f-9681-\
46d946797903"],

Cell[BoxData[
 RowBox[{
  RowBox[{"correlationPlot", "=", 
   RowBox[{"MatrixPlot", "[", 
    RowBox[{"corrMat", ",", 
     RowBox[{"FrameTicks", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Transpose", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Range", "[", 
            RowBox[{"Length", "[", "elements", "]"}], "]"}], ",", 
           RowBox[{"Keys", "@", 
            RowBox[{"properties", "[", 
             RowBox[{"[", "elements", "]"}], "]"}]}]}], "}"}], "]"}], ",", 
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", 
             RowBox[{"Rotate", "[", 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}], ",", 
               RowBox[{"\[Pi]", "/", "2"}], ",", 
               RowBox[{"{", 
                RowBox[{"Left", ",", "0"}], "}"}]}], "]"}]}], "}"}], "&"}], 
          "]"}], "@", 
         RowBox[{"Transpose", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Range", "[", 
             RowBox[{"Length", "[", "elements", "]"}], "]"}], ",", 
            RowBox[{"Keys", "@", 
             RowBox[{"properties", "[", 
              RowBox[{"[", "elements", "]"}], "]"}]}]}], "}"}], "]"}]}]}], 
       "}"}]}], ",", 
     RowBox[{"PlotLegends", "\[Rule]", "Automatic"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"ImageSize", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"Automatic", ",", "800"}], "}"}]}]}], "]"}]}], ";"}]], "Input",\

 CellChangeTimes->{{3.708256784513385*^9, 
  3.708256799706647*^9}},ExpressionUUID->"a583c1e2-bb8f-4552-919a-\
02a8c0e34e37"],

Cell[BoxData[
 RowBox[{
  RowBox[{"newDataAssoDalys", " ", "=", " ", 
   RowBox[{"Dataset", "[", 
    RowBox[{"<|", 
     RowBox[{"\"\<test\>\"", "\[Rule]", " ", "\"\<\>\""}], "|>"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.708193444402951*^9, 3.708193479837668*^9}, {
  3.708193809199267*^9, 3.708193812058792*^9}, {3.7082035532710547`*^9, 
  3.708203555443859*^9}, {3.7082514896479692`*^9, 
  3.708251490113031*^9}},ExpressionUUID->"3f20ed54-9317-4d8c-901f-\
aa206816288a"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"datasetList", "=", 
    RowBox[{"{", 
     RowBox[{"newDataAsso", ",", "newDataAssoWHO", ",", "newDataAssoDalys"}], 
     "}"}]}], ";"}]}]], "Input",
 CellChangeTimes->{{3.7081938153117743`*^9, 3.708193840578676*^9}, {
  3.7082077343636985`*^9, 3.7082077361263857`*^9}, {3.708208079893052*^9, 
  3.7082080816061363`*^9}, {3.7082088309217105`*^9, 3.708208832771803*^9}, {
  3.7082088880191617`*^9, 
  3.7082088896953764`*^9}},ExpressionUUID->"a1620973-79cd-420f-ad26-\
a6f6920161a1"],

Cell[BoxData[
 RowBox[{"DynamicModule", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Property2", "=", 
      RowBox[{"First", "@", 
       RowBox[{"Keys", "@", 
        RowBox[{"(", 
         RowBox[{"datasetList", "[", 
          RowBox[{"[", "1", "]"}], "]"}], ")"}]}]}]}], ",", 
     RowBox[{"Data", "=", "2"}], ",", 
     RowBox[{"Graphic", "=", "1"}], ",", 
     RowBox[{"Property", "=", 
      RowBox[{"First", "@", 
       RowBox[{"Keys", "@", 
        RowBox[{"(", 
         RowBox[{"datasetList", "[", 
          RowBox[{"[", "1", "]"}], "]"}], ")"}]}]}]}], ",", 
     RowBox[{"Region", "=", 
      NamespaceBox["LinguisticAssistant",
       DynamicModuleBox[{Typeset`query$$ = "all countries", Typeset`boxes$$ = 
        TemplateBox[{"\"all countries, dependencies, and territories\"", 
          RowBox[{"EntityClass", "[", 
            RowBox[{"\"Country\"", ",", "\"Countries\""}], "]"}], 
          "\"EntityClass[\\\"Country\\\", \\\"Countries\\\"]\"", 
          "\"countries\""}, "EntityClass"], 
        Typeset`allassumptions$$ = {{
         "type" -> "SubCategory", "word" -> "all countries", "template" -> 
          "Assuming ${desc1}. Use ${desc2} instead", "count" -> "2", 
          "Values" -> {{
            "name" -> "Countries", "desc" -> 
             "all countries, dependencies, and territories", "input" -> 
             "*DPClash.CountryEC.all+countries-_*Countries-"}, {
            "name" -> "SovereignCountries", "desc" -> 
             "all sovereign countries", "input" -> 
             "*DPClash.CountryEC.all+countries-_*SovereignCountries-"}}}}, 
        Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, 
        Typeset`querystate$$ = {
        "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
         0.6759569`7.281463999069408, "Messages" -> {}}}, 
        DynamicBox[ToBoxes[
          AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
           Dynamic[Typeset`query$$], 
           Dynamic[Typeset`boxes$$], 
           Dynamic[Typeset`allassumptions$$], 
           Dynamic[Typeset`assumptions$$], 
           Dynamic[Typeset`open$$], 
           Dynamic[Typeset`querystate$$]], StandardForm],
         ImageSizeCache->{403., {7., 17.}},
         TrackedSymbols:>{
          Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
           Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
        DynamicModuleValues:>{},
        UndoTrackedVariables:>{Typeset`open$$}],
       BaseStyle->{"Deploy"},
       DeleteWithContents->True,
       Editable->False,
       SelectWithContents->True]}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Panel", "@", 
    RowBox[{"Column", "[", 
     RowBox[{"{", "\[IndentingNewLine]", "\t", "\[IndentingNewLine]", "\t", 
      RowBox[{
       RowBox[{"SetterBar", "[", 
        RowBox[{
         RowBox[{"Dynamic", "[", "Data", "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"1", "\[Rule]", "\"\<    Development Indicators   \>\""}], 
           ",", 
           RowBox[{"2", "\[Rule]", "\"\<    Health DALYS    \>\""}], ",", 
           RowBox[{"3", "\[Rule]", "\"\<   NGO Distribution    \>\""}]}], 
          "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"SetterBar", "[", 
        RowBox[{
         RowBox[{"Dynamic", "[", "Graphic", "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"1", "\[Rule]", "\"\<   Distribution Map   \>\""}], ",", 
           RowBox[{"2", "\[Rule]", "\"\<      Chart      \>\""}], ",", 
           RowBox[{"3", "\[Rule]", "\"\<   Correlation Graph   \>\""}]}], 
          "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Dynamic", "[", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"!", 
            RowBox[{"MemberQ", "[", 
             RowBox[{
              RowBox[{"Keys", "[", 
               RowBox[{
               "datasetList", "\[LeftDoubleBracket]", "Data", 
                "\[RightDoubleBracket]"}], "]"}], ",", "Property"}], "]"}]}], 
           ",", 
           RowBox[{"Property", "=", 
            RowBox[{"First", "@", 
             RowBox[{"Keys", "[", 
              RowBox[{
              "datasetList", "\[LeftDoubleBracket]", "Data", 
               "\[RightDoubleBracket]"}], "]"}]}]}]}], "]"}], ";", 
         "\[IndentingNewLine]", "  ", 
         RowBox[{"PopupMenu", "[", 
          RowBox[{
           RowBox[{"Dynamic", "[", "Property", "]"}], ",", 
           RowBox[{"Keys", "@", 
            RowBox[{"(", 
             RowBox[{"datasetList", "[", 
              RowBox[{"[", "Data", "]"}], "]"}], ")"}]}]}], "]"}]}], "]"}], 
       ",", "\[IndentingNewLine]", "\t", 
       RowBox[{"PopupMenu", "[", 
        RowBox[{
         RowBox[{"Dynamic", "[", "Region", "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           TemplateBox[{"\"Europe\"",RowBox[{"EntityClass", "[", 
               RowBox[{"\"Country\"", ",", "\"Europe\""}], "]"}],
             "\"EntityClass[\\\"Country\\\", \\\"Europe\\\"]\"",
             "\"countries\""},
            "EntityClass"], ",", 
           TemplateBox[{"\"South America\"",RowBox[{"EntityClass", "[", 
               RowBox[{"\"Country\"", ",", "\"SouthAmerica\""}], "]"}],
             "\"EntityClass[\\\"Country\\\", \\\"SouthAmerica\\\"]\"",
             "\"countries\""},
            "EntityClass"], ",", 
           TemplateBox[{"\"North America\"",RowBox[{"EntityClass", "[", 
               RowBox[{"\"Country\"", ",", "\"NorthAmerica\""}], "]"}],
             "\"EntityClass[\\\"Country\\\", \\\"NorthAmerica\\\"]\"",
             "\"countries\""},
            "EntityClass"], ",", 
           TemplateBox[{"\"Oceania\"",RowBox[{"EntityClass", "[", 
               RowBox[{"\"Country\"", ",", "\"Oceania\""}], "]"}],
             "\"EntityClass[\\\"Country\\\", \\\"Oceania\\\"]\"",
             "\"countries\""},
            "EntityClass"], ",", 
           TemplateBox[{"\"Asia\"",RowBox[{"EntityClass", "[", 
               RowBox[{"\"Country\"", ",", "\"Asia\""}], "]"}],
             "\"EntityClass[\\\"Country\\\", \\\"Asia\\\"]\"","\"countries\""},
            "EntityClass"], ",", 
           TemplateBox[{"\"Africa\"",RowBox[{"EntityClass", "[", 
               RowBox[{"\"Country\"", ",", "\"Africa\""}], "]"}],
             "\"EntityClass[\\\"Country\\\", \\\"Africa\\\"]\"",
             "\"countries\""},
            "EntityClass"], ",", 
           NamespaceBox["LinguisticAssistant",
            
            DynamicModuleBox[{Typeset`query$$ = "all countries", 
             Typeset`boxes$$ = 
             TemplateBox[{
              "\"all countries, dependencies, and territories\"", 
               RowBox[{"EntityClass", "[", 
                 RowBox[{"\"Country\"", ",", "\"Countries\""}], "]"}], 
               "\"EntityClass[\\\"Country\\\", \\\"Countries\\\"]\"", 
               "\"countries\""}, "EntityClass"], 
             Typeset`allassumptions$$ = {{
              "type" -> "SubCategory", "word" -> "all countries", "template" -> 
               "Assuming ${desc1}. Use ${desc2} instead", "count" -> "2", 
               "Values" -> {{
                 "name" -> "Countries", "desc" -> 
                  "all countries, dependencies, and territories", "input" -> 
                  "*DPClash.CountryEC.all+countries-_*Countries-"}, {
                 "name" -> "SovereignCountries", "desc" -> 
                  "all sovereign countries", "input" -> 
                  "*DPClash.CountryEC.all+countries-_*SovereignCountries-"}}}}\
, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, 
             Typeset`querystate$$ = {
             "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
              0.6759569`7.281463999069408, "Messages" -> {}}}, 
             DynamicBox[ToBoxes[
               AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
                Dynamic[Typeset`query$$], 
                Dynamic[Typeset`boxes$$], 
                Dynamic[Typeset`allassumptions$$], 
                Dynamic[Typeset`assumptions$$], 
                Dynamic[Typeset`open$$], 
                Dynamic[Typeset`querystate$$]], StandardForm],
              ImageSizeCache->{403., {7., 17.}},
              
              TrackedSymbols:>{
               Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
                Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
             
             DynamicModuleValues:>{},
             UndoTrackedVariables:>{Typeset`open$$}],
            BaseStyle->{"Deploy"},
            DeleteWithContents->True,
            Editable->False,
            SelectWithContents->True]}], "}"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Dynamic", "@", 
        RowBox[{"With", "[", "\[IndentingNewLine]", "\t", 
         RowBox[{
          RowBox[{"{", "\[IndentingNewLine]", "\t", 
           RowBox[{"data", "=", "\[IndentingNewLine]", "\t", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"Region", "===", 
               NamespaceBox["LinguisticAssistant",
                
                DynamicModuleBox[{Typeset`query$$ = "all countries", 
                 Typeset`boxes$$ = 
                 TemplateBox[{
                  "\"all countries, dependencies, and territories\"", 
                   RowBox[{"EntityClass", "[", 
                    RowBox[{"\"Country\"", ",", "\"Countries\""}], "]"}], 
                   "\"EntityClass[\\\"Country\\\", \\\"Countries\\\"]\"", 
                   "\"countries\""}, "EntityClass"], 
                 Typeset`allassumptions$$ = {{
                  "type" -> "SubCategory", "word" -> "all countries", 
                   "template" -> "Assuming ${desc1}. Use ${desc2} instead", 
                   "count" -> "2", 
                   "Values" -> {{
                    "name" -> "Countries", "desc" -> 
                    "all countries, dependencies, and territories", "input" -> 
                    "*DPClash.CountryEC.all+countries-_*Countries-"}, {
                    "name" -> "SovereignCountries", "desc" -> 
                    "all sovereign countries", "input" -> 
                    "*DPClash.CountryEC.all+countries-_*SovereignCountries-"}}\
}}, Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, 
                 Typeset`querystate$$ = {
                 "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
                  1.429569`6.606750115481732, "Messages" -> {}}}, 
                 DynamicBox[ToBoxes[
                   AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
                    Dynamic[Typeset`query$$], 
                    Dynamic[Typeset`boxes$$], 
                    Dynamic[Typeset`allassumptions$$], 
                    Dynamic[Typeset`assumptions$$], 
                    Dynamic[Typeset`open$$], 
                    Dynamic[Typeset`querystate$$]], StandardForm],
                  ImageSizeCache->{403., {7., 17.}},
                  
                  TrackedSymbols:>{
                   Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$,
                     Typeset`assumptions$$, Typeset`open$$, 
                    Typeset`querystate$$}],
                 DynamicModuleValues:>{},
                 UndoTrackedVariables:>{Typeset`open$$}],
                BaseStyle->{"Deploy"},
                DeleteWithContents->True,
                Editable->False,
                SelectWithContents->True]}], ",", "\[IndentingNewLine]", 
              "\t\t", 
              RowBox[{"Flatten", "@", 
               RowBox[{"Normal", "@", 
                RowBox[{"Values", "@", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"datasetList", "[", 
                    RowBox[{"[", "Data", "]"}], "]"}], "[", "Property", "]"}],
                   ")"}]}]}]}], ",", "\[IndentingNewLine]", "\t\t", 
              RowBox[{"Normal", "@", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"datasetList", "[", 
                   RowBox[{"[", "Data", "]"}], "]"}], "[", "Property", "]"}], 
                 "[", "Region", "]"}], ")"}]}]}], "\[IndentingNewLine]", "\t",
              "]"}]}], "\[IndentingNewLine]", "\t", "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Which", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"Data", "<", "3"}], "&&", 
             RowBox[{"Graphic", "===", "1"}]}], ",", "\t\t", 
            "\[IndentingNewLine]", 
            RowBox[{"Labeled", "[", 
             RowBox[{
              RowBox[{
              "GeoRegionValuePlot", "[", "\[IndentingNewLine]", "\t\t\t", 
               RowBox[{"data", ",", 
                RowBox[{"GeoLabels", "\[Rule]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"Tooltip", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"#2", "\[Rule]", "#4"}]}], "]"}], "&"}], ")"}]}], 
                ",", 
                RowBox[{"PlotLegends", "\[Rule]", "False"}], ",", 
                RowBox[{"GeoBackground", "\[Rule]", 
                 RowBox[{"GeoStyling", "[", "\"\<ReliefMap\>\"", "]"}]}], ",", 
                RowBox[{"MissingStyle", "\[Rule]", "White"}], ",", 
                RowBox[{
                "PlotLabel", "\[Rule]", " ", "\"\<Distribution Map\>\""}]}], 
               "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{"Labeled", "[", "\[IndentingNewLine]", "\t\t\t\t", 
               RowBox[{
                RowBox[{"SmoothHistogram", "[", 
                 RowBox[{
                  RowBox[{"DeleteMissing", "@", 
                   RowBox[{"Values", "@", "data"}]}], ",", 
                  "\[IndentingNewLine]", "\t\t\t\t", 
                  RowBox[{"ColorFunction", "\[Rule]", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "ColorData", "[", "\"\<GeographyGradient\>\"", "]"}], "[",
                     "#", "]"}], "&"}], ")"}]}], ",", "\[IndentingNewLine]", 
                  "\t\t\t\t", 
                  RowBox[{"Filling", "\[Rule]", "Axis"}], ",", 
                  "\[IndentingNewLine]", "\t\t\t\t", 
                  RowBox[{"Axes", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{"True", ",", "False"}], "}"}]}], ",", " ", 
                  "\[IndentingNewLine]", "\t\t\t\t", 
                  RowBox[{"PlotRange", "\[Rule]", "All"}]}], 
                 "\[IndentingNewLine]", "\t\t\t", "]"}], ",", 
                RowBox[{"unitSplit", "@", "Property"}], ",", "Bottom"}], 
               "]"}], ",", "Right"}], "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"Graphic", "===", "2"}], ",", "\[IndentingNewLine]", 
            RowBox[{"BarChart", "[", 
             RowBox[{
              RowBox[{"Values", "@", 
               RowBox[{
                RowBox[{"SortBy", "[", 
                 RowBox[{"data", ",", "Values"}], "]"}], "[", 
                RowBox[{"[", 
                 RowBox[{
                  RowBox[{"-", "10"}], ";;"}], "]"}], "]"}]}], ",", 
              RowBox[{"ChartLabels", "\[Rule]", 
               RowBox[{"Placed", "[", 
                RowBox[{
                 RowBox[{"Keys", "@", 
                  RowBox[{
                   RowBox[{"SortBy", "[", 
                    RowBox[{"data", ",", "Values"}], "]"}], "[", 
                   RowBox[{"[", 
                    RowBox[{
                    RowBox[{"-", "10"}], ";;"}], "]"}], "]"}]}], ",", 
                 "After"}], "]"}]}], ",", 
              RowBox[{"ColorFunction", "\[Rule]", "\"\<Rainbow\>\""}], ",", 
              RowBox[{"BarOrigin", "\[Rule]", "Left"}]}], "]"}], ",", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"Graphic", "===", "3"}], ",", "\[IndentingNewLine]", 
            RowBox[{"Column", "[", 
             RowBox[{"{", 
              RowBox[{"correlationPlot", ",", "\[IndentingNewLine]", 
               RowBox[{"Dynamic", "@", " ", 
                RowBox[{"PopupMenu", "[", 
                 RowBox[{"Property2", ",", 
                  RowBox[{"Keys", "@", 
                   RowBox[{"(", 
                    RowBox[{"datasetList", "[", 
                    RowBox[{"[", "Data", "]"}], "]"}], ")"}]}]}], "]"}]}], 
               ",", "\[IndentingNewLine]", 
               RowBox[{"CorrelationTest", "[", 
                RowBox[{"DeleteMissing", "[", 
                 RowBox[{
                  RowBox[{"Transpose", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Rest", "[", 
                    RowBox[{"Values", "@", 
                    RowBox[{"Flatten", "@", 
                    RowBox[{"Normal", "@", 
                    RowBox[{"Values", "@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"datasetList", "[", 
                    RowBox[{"[", "Data", "]"}], "]"}], "[", "Property", "]"}],
                     ")"}]}]}]}]}], "]"}], ",", 
                    RowBox[{"Rest", "[", 
                    RowBox[{"Values", "@", 
                    RowBox[{"Flatten", "@", 
                    RowBox[{"Normal", "@", 
                    RowBox[{"Values", "@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"datasetList", "[", 
                    RowBox[{"[", "Data", "]"}], "]"}], "[", "Property2", 
                    "]"}], ")"}]}]}]}]}], "]"}]}], "}"}], "]"}], ",", "1", 
                  ",", "2"}], "]"}], "]"}]}], "\[IndentingNewLine]", "}"}], 
             "]"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Data", "===", "3"}], "&&", 
             RowBox[{"Graphic", "===", "1"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"Plot", "[", 
             RowBox[{
              RowBox[{"x", "^", "2"}], ",", 
              RowBox[{"{", 
               RowBox[{"x", ",", "1", ",", "4"}], "}"}]}], "]"}]}], 
           "\[IndentingNewLine]", "\[IndentingNewLine]", "\t\t\t", "]"}]}], 
         "]"}]}]}], "}"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{
  3.7082100300872335`*^9, {3.7082100958165417`*^9, 3.7082102758504257`*^9}, {
   3.708210325821702*^9, 3.7082103717289224`*^9}, 3.708210426791463*^9, {
   3.70821055089701*^9, 3.7082105851040845`*^9}, {3.7082108056266336`*^9, 
   3.7082108357119665`*^9}, {3.708210881465806*^9, 3.7082110717797327`*^9}, {
   3.7082111195525*^9, 3.708211222817798*^9}, {3.708211273873844*^9, 
   3.7082113446342382`*^9}, {3.7082114269357586`*^9, 3.708211428081991*^9}, {
   3.7082120187126174`*^9, 3.708212055100153*^9}, {3.708212103957057*^9, 
   3.7082121095570436`*^9}, {3.7082121424940805`*^9, 3.708212202417178*^9}, {
   3.708212404414619*^9, 3.708212410076488*^9}, {3.7082126272399817`*^9, 
   3.7082126672379704`*^9}, {3.7082127112333713`*^9, 
   3.7082127362127457`*^9}, {3.7082500200375795`*^9, 
   3.7082500416257715`*^9}, {3.7082500716779428`*^9, 3.708250138846325*^9}, {
   3.7082501743931665`*^9, 3.7082502444755697`*^9}, {3.708250323411713*^9, 
   3.7082503479410954`*^9}, {3.708250394315406*^9, 3.7082504019971075`*^9}, {
   3.7082505359481707`*^9, 3.708250555444229*^9}, {3.7082513088751097`*^9, 
   3.708251345545355*^9}, {3.7082541883799567`*^9, 3.708254201880152*^9}, 
   3.7082542840706234`*^9, {3.7082544800620174`*^9, 3.7082545355154357`*^9}, {
   3.7082545698643007`*^9, 3.7082547681704216`*^9}, {3.7082548136955757`*^9, 
   3.7082548610611253`*^9}, {3.70825496393782*^9, 3.708254965403677*^9}, {
   3.7082550483000326`*^9, 3.7082550613923116`*^9}, 3.708255101356522*^9, {
   3.7082551504551787`*^9, 3.7082551592310085`*^9}, {3.708255305130975*^9, 
   3.708255335491417*^9}, {3.7082553684581647`*^9, 3.708255370667189*^9}, {
   3.708255403591239*^9, 3.708255419956745*^9}, {3.7082554554922595`*^9, 
   3.7082555273118644`*^9}, {3.7082557837156205`*^9, 
   3.7082557851297607`*^9}, {3.7082560134711137`*^9, 
   3.7082560385872965`*^9}},ExpressionUUID->"9178fbfa-bed7-4cba-bea6-\
f4607f1efe72"],

Cell[BoxData[
 RowBox[{"GeoRegionValuePlot", "[", "\[IndentingNewLine]", "\t\t\t", 
  RowBox[{
   RowBox[{"Normal", "@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
      "newDataAsso", "[", 
       "\"\<Access to clean fuels and technologies for cooking  (% of \
population)\>\"", "]"}], "[", 
      TemplateBox[{"\"South America\"",RowBox[{"EntityClass", "[", 
          RowBox[{"\"Country\"", ",", "\"SouthAmerica\""}], "]"}],
        "\"EntityClass[\\\"Country\\\", \\\"SouthAmerica\\\"]\"",
        "\"countries\""},
       "EntityClass"], "]"}], ")"}]}], ",", 
   RowBox[{"GeoLabels", "\[Rule]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Tooltip", "[", 
       RowBox[{"#1", ",", 
        RowBox[{"#2", "\[Rule]", "#4"}]}], "]"}], "&"}], ")"}]}]}], 
  "\[IndentingNewLine]", "\t\t\t", "]"}]], "Input",
 CellChangeTimes->{{3.708210645037021*^9, 
  3.7082106515775337`*^9}},ExpressionUUID->"9bd4fc80-31b5-4a34-bc63-\
6fb2f7682e83"],

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", "\t", 
  RowBox[{
   RowBox[{"With", "[", "\[IndentingNewLine]", "\t", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", "\t", 
      RowBox[{"data", "=", "\[IndentingNewLine]", "\t", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"Region", "===", 
          NamespaceBox["LinguisticAssistant",
           
           DynamicModuleBox[{Typeset`query$$ = "all countries", 
            Typeset`boxes$$ = 
            TemplateBox[{"\"all countries, dependencies, and territories\"", 
              RowBox[{"EntityClass", "[", 
                RowBox[{"\"Country\"", ",", "\"Countries\""}], "]"}], 
              "\"EntityClass[\\\"Country\\\", \\\"Countries\\\"]\"", 
              "\"countries\""}, "EntityClass"], 
            Typeset`allassumptions$$ = {{
             "type" -> "SubCategory", "word" -> "all countries", "template" -> 
              "Assuming ${desc1}. Use ${desc2} instead", "count" -> "2", 
              "Values" -> {{
                "name" -> "Countries", "desc" -> 
                 "all countries, dependencies, and territories", "input" -> 
                 "*DPClash.CountryEC.all+countries-_*Countries-"}, {
                "name" -> "SovereignCountries", "desc" -> 
                 "all sovereign countries", "input" -> 
                 "*DPClash.CountryEC.all+countries-_*SovereignCountries-"}}}},
             Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, 
            Typeset`querystate$$ = {
            "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
             1.429569`6.606750115481732, "Messages" -> {}}}, 
            DynamicBox[ToBoxes[
              AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
               Dynamic[Typeset`query$$], 
               Dynamic[Typeset`boxes$$], 
               Dynamic[Typeset`allassumptions$$], 
               Dynamic[Typeset`assumptions$$], 
               Dynamic[Typeset`open$$], 
               Dynamic[Typeset`querystate$$]], StandardForm],
             ImageSizeCache->{403., {7., 17.}},
             
             TrackedSymbols:>{
              Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
               Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
            DynamicModuleValues:>{},
            UndoTrackedVariables:>{Typeset`open$$}],
           BaseStyle->{"Deploy"},
           DeleteWithContents->True,
           Editable->False,
           SelectWithContents->True]}], ",", "\[IndentingNewLine]", "\t\t", 
         RowBox[{"Flatten", "@", 
          RowBox[{"Normal", "@", 
           RowBox[{"Values", "@", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"datasetList", "[", 
               RowBox[{"[", "Data", "]"}], "]"}], "[", "Property", "]"}], 
             ")"}]}]}]}], ",", "\[IndentingNewLine]", "\t\t", 
         RowBox[{"Normal", "@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"datasetList", "[", 
              RowBox[{"[", "Data", "]"}], "]"}], "[", "Property", "]"}], "[", 
            "Region", "]"}], ")"}]}]}], "\[IndentingNewLine]", "\t", "]"}]}], 
      "\[IndentingNewLine]", "\t", "}"}], ",", "\[IndentingNewLine]", "\t", 
     "\[IndentingNewLine]", "\t", 
     RowBox[{"Which", "[", "\[IndentingNewLine]", "\t\t", 
      RowBox[{
       RowBox[{
        RowBox[{"Data", "<", "3"}], "&&", 
        RowBox[{"Graphic", "===", "1"}]}], ",", "\[IndentingNewLine]", 
       "\t\t\t", "\[IndentingNewLine]", "\t\t", 
       RowBox[{"Labeled", "[", "\[IndentingNewLine]", "\t\t\t", 
        RowBox[{
         RowBox[{"GeoRegionValuePlot", "[", 
          RowBox[{"data", ",", 
           RowBox[{"MissingStyle", "\[Rule]", "White"}], ",", 
           RowBox[{"PlotLabel", "\[Rule]", " ", "\"\<Distribution Map\>\""}], 
           ",", 
           RowBox[{"GeoLabels", "\[Rule]", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Tooltip", "[", 
               RowBox[{"#1", ",", 
                RowBox[{"#2", "\[Rule]", "#4"}]}], "]"}], "&"}], ")"}]}], ",",
            "\[IndentingNewLine]", "\t\t\t", 
           RowBox[{"PlotLegends", "\[Rule]", "False"}], ",", 
           RowBox[{"GeoBackground", "\[Rule]", 
            RowBox[{"GeoStyling", "[", "\"\<ReliefMap\>\"", "]"}]}]}], "]"}], 
         ",", "\[IndentingNewLine]", "\t\t\t", 
         RowBox[{"Labeled", "[", "\[IndentingNewLine]", "\t\t\t\t", 
          RowBox[{
           RowBox[{"SmoothHistogram", "[", 
            RowBox[{
             RowBox[{"DeleteMissing", "@", 
              RowBox[{"Values", "@", "data"}]}], ",", "\[IndentingNewLine]", 
             "\t\t\t\t", 
             RowBox[{"ColorFunction", "\[Rule]", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"ColorData", "[", "\"\<GeographyGradient\>\"", "]"}],
                  "[", "#", "]"}], "&"}], ")"}]}], ",", "\[IndentingNewLine]",
              "\t\t\t\t", 
             RowBox[{"Filling", "\[Rule]", "Axis"}], ",", 
             "\[IndentingNewLine]", "\t\t\t\t", 
             RowBox[{"Axes", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"True", ",", "False"}], "}"}]}], ",", " ", 
             "\[IndentingNewLine]", "\t\t\t\t", 
             RowBox[{"PlotRange", "\[Rule]", "All"}]}], "\[IndentingNewLine]",
             "\t\t\t", "]"}], ",", "\[IndentingNewLine]", "\t\t\t", 
           RowBox[{"unitSplit", "@", "Property"}], ",", "Bottom"}], "]"}], 
         ",", "Right"}], "]"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "\t\t", 
       RowBox[{"Graphic", "===", "2"}], ",", " ", "\[IndentingNewLine]", 
       "\t\t\t\t", 
       RowBox[{"plotlist", "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], "\[IndentingNewLine]", "\t\t", 
      "]"}]}], "\[IndentingNewLine]", "\t", "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"Data", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "\"\<    Development Indicators   \>\""}], ",", 
       RowBox[{"2", "\[Rule]", "\"\<    Health DALYS    \>\""}], ",", 
       RowBox[{"3", "\[Rule]", "\"\<   NGO Distribution    \>\""}]}], "}"}], 
     ",", 
     RowBox[{"ControlType", "\[Rule]", "SetterBar"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"Graphic", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "\"\<   Distribution Map   \>\""}], ",", 
       RowBox[{"2", "\[Rule]", "\"\<      Chart      \>\""}], ",", 
       RowBox[{"3", "\[Rule]", "\"\<   Correlation Graph   \>\""}]}], "}"}]}],
     "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"Property", ",", 
       RowBox[{"First", "@", 
        RowBox[{"Keys", "@", 
         RowBox[{"(", 
          RowBox[{"datasetList", "[", 
           RowBox[{"[", "1", "]"}], "]"}], ")"}]}]}]}], "}"}], ",", 
     RowBox[{"Keys", "[", 
      RowBox[{"datasetList", "[", 
       RowBox[{"[", "Data", "]"}], "]"}], "]"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "PopupMenu"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"Region", ",", 
       TemplateBox[{
        "\"all countries, dependencies, and territories\"",
         RowBox[{"EntityClass", "[", 
           RowBox[{"\"Country\"", ",", "\"Countries\""}], "]"}],
         "\"EntityClass[\\\"Country\\\", \\\"Countries\\\"]\"",
         "\"countries\""},
        "EntityClass"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       NamespaceBox["LinguisticAssistant",
        DynamicModuleBox[{Typeset`query$$ = "all countries", Typeset`boxes$$ =
          TemplateBox[{"\"all countries, dependencies, and territories\"", 
           RowBox[{"EntityClass", "[", 
             RowBox[{"\"Country\"", ",", "\"Countries\""}], "]"}], 
           "\"EntityClass[\\\"Country\\\", \\\"Countries\\\"]\"", 
           "\"countries\""}, "EntityClass"], 
         Typeset`allassumptions$$ = {{
          "type" -> "SubCategory", "word" -> "all countries", "template" -> 
           "Assuming ${desc1}. Use ${desc2} instead", "count" -> "2", 
           "Values" -> {{
             "name" -> "Countries", "desc" -> 
              "all countries, dependencies, and territories", "input" -> 
              "*DPClash.CountryEC.all+countries-_*Countries-"}, {
             "name" -> "SovereignCountries", "desc" -> 
              "all sovereign countries", "input" -> 
              "*DPClash.CountryEC.all+countries-_*SovereignCountries-"}}}}, 
         Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, 
         Typeset`querystate$$ = {
         "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
          0.6759569`7.281463999069408, "Messages" -> {}}}, 
         DynamicBox[ToBoxes[
           AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
            Dynamic[Typeset`query$$], 
            Dynamic[Typeset`boxes$$], 
            Dynamic[Typeset`allassumptions$$], 
            Dynamic[Typeset`assumptions$$], 
            Dynamic[Typeset`open$$], 
            Dynamic[Typeset`querystate$$]], StandardForm],
          ImageSizeCache->{403., {7., 17.}},
          
          TrackedSymbols:>{
           Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
            Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
         DynamicModuleValues:>{},
         UndoTrackedVariables:>{Typeset`open$$}],
        BaseStyle->{"Deploy"},
        DeleteWithContents->True,
        Editable->False,
        SelectWithContents->True], ",", 
       TemplateBox[{"\"Europe\"",RowBox[{"EntityClass", "[", 
           RowBox[{"\"Country\"", ",", "\"Europe\""}], "]"}],
         "\"EntityClass[\\\"Country\\\", \\\"Europe\\\"]\"","\"countries\""},
        "EntityClass"], ",", 
       TemplateBox[{"\"South America\"",RowBox[{"EntityClass", "[", 
           RowBox[{"\"Country\"", ",", "\"SouthAmerica\""}], "]"}],
         "\"EntityClass[\\\"Country\\\", \\\"SouthAmerica\\\"]\"",
         "\"countries\""},
        "EntityClass"], ",", 
       TemplateBox[{"\"North America\"",RowBox[{"EntityClass", "[", 
           RowBox[{"\"Country\"", ",", "\"NorthAmerica\""}], "]"}],
         "\"EntityClass[\\\"Country\\\", \\\"NorthAmerica\\\"]\"",
         "\"countries\""},
        "EntityClass"], ",", 
       TemplateBox[{"\"Oceania\"",RowBox[{"EntityClass", "[", 
           RowBox[{"\"Country\"", ",", "\"Oceania\""}], "]"}],
         "\"EntityClass[\\\"Country\\\", \\\"Oceania\\\"]\"","\"countries\""},
        
        "EntityClass"], ",", 
       TemplateBox[{"\"Asia\"",RowBox[{"EntityClass", "[", 
           RowBox[{"\"Country\"", ",", "\"Asia\""}], "]"}],
         "\"EntityClass[\\\"Country\\\", \\\"Asia\\\"]\"","\"countries\""},
        "EntityClass"], ",", 
       TemplateBox[{"\"Africa\"",RowBox[{"EntityClass", "[", 
           RowBox[{"\"Country\"", ",", "\"Africa\""}], "]"}],
         "\"EntityClass[\\\"Country\\\", \\\"Africa\\\"]\"","\"countries\""},
        "EntityClass"]}], "}"}]}], "}"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.707863768984222*^9, 3.707863788692082*^9}, {
   3.7078638220410748`*^9, 3.7078638878483763`*^9}, {3.707863918252857*^9, 
   3.707864005510111*^9}, {3.70786412812782*^9, 3.707864240043137*^9}, {
   3.707864303602345*^9, 3.7078643339801903`*^9}, {3.707867832756033*^9, 
   3.707867837825014*^9}, {3.7079434433269167`*^9, 3.7079434495253754`*^9}, {
   3.7079437416128445`*^9, 3.707943767630491*^9}, {3.707944527413119*^9, 
   3.707944533979453*^9}, {3.7079446868997436`*^9, 3.707944735955471*^9}, {
   3.707944783810272*^9, 3.707944792974677*^9}, 3.7079448309620924`*^9, {
   3.7079458501298914`*^9, 3.70794587875699*^9}, {3.707945910122095*^9, 
   3.707945911106147*^9}, {3.7079781648954535`*^9, 3.7079782271866817`*^9}, {
   3.7079782891969037`*^9, 3.707978294290369*^9}, {3.7079783834408693`*^9, 
   3.707978477084669*^9}, {3.7079785962541027`*^9, 3.707978628426162*^9}, {
   3.7079787345155773`*^9, 3.7079788721837163`*^9}, {3.7079789096963344`*^9, 
   3.707978939482731*^9}, {3.7080288175097184`*^9, 3.708028820841388*^9}, {
   3.708122935415027*^9, 3.7081229567925014`*^9}, 3.708123001537058*^9, {
   3.708123119865441*^9, 3.7081231458516884`*^9}, {3.708123178112468*^9, 
   3.708123215439088*^9}, {3.7081232480526943`*^9, 3.7081232553456545`*^9}, {
   3.708123443861044*^9, 3.7081234734577265`*^9}, {3.7081239205405073`*^9, 
   3.708124081841838*^9}, {3.7081241972992487`*^9, 3.708124211877186*^9}, {
   3.7081438453926754`*^9, 3.708143862331209*^9}, {3.708143922423093*^9, 
   3.7081439266836643`*^9}, {3.7081440237545195`*^9, 
   3.7081441446913433`*^9}, {3.708144179486718*^9, 3.708144194007354*^9}, {
   3.7081442460882797`*^9, 3.7081443221667004`*^9}, {3.708178312364268*^9, 
   3.7081783364551373`*^9}, {3.7081783962530565`*^9, 
   3.7081784836653643`*^9}, {3.708178828919384*^9, 3.7081788917981787`*^9}, {
   3.7081789388646727`*^9, 3.7081789946926465`*^9}, {3.708179029591658*^9, 
   3.7081790318375044`*^9}, {3.7081815852290163`*^9, 3.708181621678135*^9}, {
   3.7081817081154003`*^9, 3.708181873547918*^9}, 3.708182049172908*^9, {
   3.7081824666944304`*^9, 3.708182618888981*^9}, {3.7081838583114605`*^9, 
   3.708183895345546*^9}, {3.7081839862796173`*^9, 3.7081839980069876`*^9}, {
   3.708184432935668*^9, 3.708184518959137*^9}, {3.708186950797917*^9, 
   3.7081870613855734`*^9}, {3.7081871028775516`*^9, 3.7081871145354657`*^9}, 
   3.7081893685126066`*^9, {3.7081910082678857`*^9, 3.7081910085927486`*^9}, {
   3.708191044596972*^9, 3.7081910450390773`*^9}, {3.708191183661827*^9, 
   3.708191184088462*^9}, {3.708193233676607*^9, 3.7081932372817965`*^9}, {
   3.7081932772422*^9, 3.7081932853613987`*^9}, {3.7081933285305986`*^9, 
   3.708193333808322*^9}, {3.7081933690362854`*^9, 3.708193429142421*^9}, {
   3.7081934931816206`*^9, 3.708193503224732*^9}, {3.7081935912655764`*^9, 
   3.7081935987039585`*^9}, {3.7081936711983*^9, 3.7081937491410875`*^9}, 
   3.708193796980821*^9, {3.708193860706724*^9, 3.708193891273345*^9}, {
   3.7081939627186165`*^9, 3.708193977752606*^9}, 3.708194111788754*^9, {
   3.7081941587954197`*^9, 3.7081943469128604`*^9}, {3.708194533773957*^9, 
   3.70819454171344*^9}, {3.7081945721921287`*^9, 3.7081945798187532`*^9}, {
   3.7081949297399235`*^9, 3.7081949381576333`*^9}, {3.708194969370659*^9, 
   3.70819500115347*^9}, {3.7081978660553045`*^9, 3.7081978938278303`*^9}, {
   3.7081979343782587`*^9, 3.7081979997009525`*^9}, {3.708198098170966*^9, 
   3.708198135142481*^9}, {3.7082007838307943`*^9, 3.7082008136587934`*^9}, {
   3.7082008744192915`*^9, 3.7082008840002866`*^9}, {3.7082009215005617`*^9, 
   3.7082009408912706`*^9}, {3.708203034317501*^9, 3.70820313531278*^9}, {
   3.708203181107521*^9, 3.7082032752034836`*^9}, {3.7082034007769475`*^9, 
   3.708203420100232*^9}, {3.70820357271483*^9, 3.70820357834134*^9}, {
   3.708204448473875*^9, 3.708204449226017*^9}, 3.7082044813548007`*^9, {
   3.708204636149317*^9, 3.708204722884347*^9}, 3.7082047938984528`*^9, {
   3.70820500767809*^9, 3.7082050078826556`*^9}, {3.7082062104255915`*^9, 
   3.7082062228646946`*^9}, {3.708206299791331*^9, 3.70820631410122*^9}, {
   3.7082063996977997`*^9, 3.7082064033826*^9}, {3.708206660154484*^9, 
   3.7082066777179174`*^9}, 3.7082067848020105`*^9, {3.708206816814517*^9, 
   3.708206817075815*^9}, {3.7082068835765963`*^9, 3.7082068992547135`*^9}, {
   3.708207020837805*^9, 3.708207024739653*^9}, {3.7082070551050563`*^9, 
   3.708207058547846*^9}, 3.70820803386604*^9, {3.708209031524748*^9, 
   3.7082090428183994`*^9}, 3.708209074049233*^9, {3.708209132224802*^9, 
   3.7082092977274137`*^9}, {3.7082093713339057`*^9, 
   3.7082093829074097`*^9}},ExpressionUUID->"b372c013-cd69-43b6-810a-\
9b6b07a1c943"],

Cell[BoxData["7"], "Input",
 CellChangeTimes->{
  3.7082042396187644`*^9},ExpressionUUID->"f0194ff0-60df-4af2-98f3-\
ce1b90cec7f5"],

Cell[BoxData[
 RowBox[{"First", "@", 
  RowBox[{"Keys", "[", 
   RowBox[{"datasetList", "[", 
    RowBox[{"[", "1", "]"}], "]"}], "]"}]}]], "Input",ExpressionUUID->\
"6141f137-7189-4c22-89e2-1b9a3e007215"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"newDataAsso", "[", 
    RowBox[{"[", "1", "]"}], "]"}], ";"}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.7081922902899184`*^9, 3.708192292600686*^9}, {
  3.7081923932207947`*^9, 3.7081924189111834`*^9}, {3.708192685802315*^9, 
  3.7081926928924894`*^9}},ExpressionUUID->"29a2e850-ac2e-4110-a1a3-\
d6c281282755"],

Cell[BoxData[
 RowBox[{"Histogram", "[", 
  RowBox[{"newDataAsso", "[", 
   RowBox[{"[", "1", "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7081922329318466`*^9, 
  3.708192248828332*^9}},ExpressionUUID->"5670bb6e-96e3-40b5-ad6f-\
f9a2e56cc55d"],

Cell[BoxData[
 RowBox[{"GeoRegionValuePlot", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     NamespaceBox["LinguisticAssistant",
      DynamicModuleBox[{Typeset`query$$ = "London", Typeset`boxes$$ = 
       TemplateBox[{"\"London\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"City\"", ",", 
             RowBox[{"{", 
               
               RowBox[{
                "\"London\"", ",", "\"GreaterLondon\"", ",", 
                 "\"UnitedKingdom\""}], "}"}]}], "]"}], 
         "\"Entity[\\\"City\\\", {\\\"London\\\", \\\"GreaterLondon\\\", \
\\\"UnitedKingdom\\\"}]\"", "\"city\""}, "Entity"], 
       Typeset`allassumptions$$ = {{
        "type" -> "Clash", "word" -> "London", "template" -> 
         "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> 
         "4", "Values" -> {{
           "name" -> "City", "desc" -> "a city", "input" -> 
            "*C.London-_*City-"}, {
           "name" -> "AdministrativeDivision", "desc" -> 
            "an administrative division", "input" -> 
            "*C.London-_*AdministrativeDivision-"}, {
           "name" -> "Surname", "desc" -> "a surname", "input" -> 
            "*C.London-_*Surname-"}, {
           "name" -> "GivenName", "desc" -> "a given name", "input" -> 
            "*C.London-_*GivenName-"}}}, {
        "type" -> "SubCategory", "word" -> "London", "template" -> 
         "Assuming ${desc1}. Use ${desc2} instead", "count" -> "7", 
         "Values" -> {{
           "name" -> "{London, GreaterLondon, UnitedKingdom}", "desc" -> 
            "London (United Kingdom)", "input" -> 
            "*DPClash.CityE.London-_**London.GreaterLondon.UnitedKingdom--"}, \
{"name" -> "{London, Ontario, Canada}", "desc" -> "London (Canada)", "input" -> 
            "*DPClash.CityE.London-_**London.Ontario.Canada--"}, {
           "name" -> "{London, Ohio, UnitedStates}", "desc" -> 
            "London (Ohio, USA)", "input" -> 
            "*DPClash.CityE.London-_**London.Ohio.UnitedStates--"}, {
           "name" -> "{London, Kentucky, UnitedStates}", "desc" -> 
            "London (Kentucky, USA)", "input" -> 
            "*DPClash.CityE.London-_**London.Kentucky.UnitedStates--"}, {
           "name" -> "{London, Arkansas, UnitedStates}", "desc" -> 
            "London (Arkansas, USA)", "input" -> 
            "*DPClash.CityE.London-_**London.Arkansas.UnitedStates--"}, {
           "name" -> "{London, California, UnitedStates}", "desc" -> 
            "London (California, USA)", "input" -> 
            "*DPClash.CityE.London-_**London.California.UnitedStates--"}, {
           "name" -> "{London, Kiritimati, Kiribati}", "desc" -> 
            "London (Kiribati)", "input" -> 
            "*DPClash.CityE.London-_**London.Kiritimati.Kiribati--"}}}}, 
       Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, 
       Typeset`querystate$$ = {
       "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
        0.6644197`7.2739874942687885, "Messages" -> {}}}, 
       DynamicBox[ToBoxes[
         AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
          Dynamic[Typeset`query$$], 
          Dynamic[Typeset`boxes$$], 
          Dynamic[Typeset`allassumptions$$], 
          Dynamic[Typeset`assumptions$$], 
          Dynamic[Typeset`open$$], 
          Dynamic[Typeset`querystate$$]], StandardForm],
        ImageSizeCache->{136., {7., 17.}},
        TrackedSymbols:>{
         Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
          Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
       DynamicModuleValues:>{},
       UndoTrackedVariables:>{Typeset`open$$}],
      BaseStyle->{"Deploy"},
      DeleteWithContents->True,
      Editable->False,
      SelectWithContents->True], "\[Rule]", "\"\<a\>\""}], ",", 
    RowBox[{
     NamespaceBox["LinguisticAssistant",
      DynamicModuleBox[{Typeset`query$$ = "Paris", Typeset`boxes$$ = 
       TemplateBox[{"\"Paris\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"City\"", ",", 
             RowBox[{"{", 
               
               RowBox[{
                "\"Paris\"", ",", "\"IleDeFrance\"", ",", "\"France\""}], 
               "}"}]}], "]"}], 
         "\"Entity[\\\"City\\\", {\\\"Paris\\\", \\\"IleDeFrance\\\", \
\\\"France\\\"}]\"", "\"city\""}, "Entity"], 
       Typeset`allassumptions$$ = {{
        "type" -> "Clash", "word" -> "Paris", "template" -> 
         "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> 
         "5", "Values" -> {{
           "name" -> "City", "desc" -> "a city", "input" -> 
            "*C.Paris-_*City-"}, {
           "name" -> "AdministrativeDivision", "desc" -> 
            "an administrative division", "input" -> 
            "*C.Paris-_*AdministrativeDivision-"}, {
           "name" -> "Surname", "desc" -> "a surname", "input" -> 
            "*C.Paris-_*Surname-"}, {
           "name" -> "GivenName", "desc" -> "a given name", "input" -> 
            "*C.Paris-_*GivenName-"}, {
           "name" -> "Person", "desc" -> "a person", "input" -> 
            "*C.Paris-_*Person-"}}}, {
        "type" -> "SubCategory", "word" -> "Paris", "template" -> 
         "Assuming ${desc1}. Use ${desc2} instead", "count" -> "14", 
         "Values" -> {{
           "name" -> "{Paris, IleDeFrance, France}", "desc" -> 
            "Paris (France)", "input" -> 
            "*DPClash.CityE.Paris-_**Paris.IleDeFrance.France--"}, {
           "name" -> "{Paris, Maine, UnitedStates}", "desc" -> 
            "Paris (Maine, USA)", "input" -> 
            "*DPClash.CityE.Paris-_**Paris.Maine.UnitedStates--"}, {
           "name" -> "{Paris, NewYork, UnitedStates}", "desc" -> 
            "Paris (New York, USA)", "input" -> 
            "*DPClash.CityE.Paris-_**Paris.NewYork.UnitedStates--"}, {
           "name" -> "{Paris, Texas, UnitedStates}", "desc" -> 
            "Paris (Texas, USA)", "input" -> 
            "*DPClash.CityE.Paris-_**Paris.Texas.UnitedStates--"}, {
           "name" -> "{Paris, Kentucky, UnitedStates}", "desc" -> 
            "Paris (Kentucky, USA)", "input" -> 
            "*DPClash.CityE.Paris-_**Paris.Kentucky.UnitedStates--"}, {
           "name" -> "{Paris, Ontario, Canada}", "desc" -> "Paris (Canada)", 
            "input" -> "*DPClash.CityE.Paris-_**Paris.Ontario.Canada--"}, {
           "name" -> "{Paris, Tennessee, UnitedStates}", "desc" -> 
            "Paris (Tennessee, USA)", "input" -> 
            "*DPClash.CityE.Paris-_**Paris.Tennessee.UnitedStates--"}, {
           "name" -> "{Paris, Illinois, UnitedStates}", "desc" -> 
            "Paris (Illinois, USA)", "input" -> 
            "*DPClash.CityE.Paris-_**Paris.Illinois.UnitedStates--"}, {
           "name" -> "{Paris, Arkansas, UnitedStates}", "desc" -> 
            "Paris (Arkansas, USA)", "input" -> 
            "*DPClash.CityE.Paris-_**Paris.Arkansas.UnitedStates--"}, {
           "name" -> "{Paris, Wisconsin, UnitedStates}", "desc" -> 
            "Paris (Wisconsin, USA)", "input" -> 
            "*DPClash.CityE.Paris-_**Paris.Wisconsin.UnitedStates--"}, {
           "name" -> "{Paris, Missouri, UnitedStates}", "desc" -> 
            "Paris (Missouri, USA)", "input" -> 
            "*DPClash.CityE.Paris-_**Paris.Missouri.UnitedStates--"}, {
           "name" -> "{ParisTownship, Michigan, UnitedStates}", "desc" -> 
            "Paris Township (Michigan, USA)", "input" -> 
            "*DPClash.CityE.Paris-_**ParisTownship.Michigan.UnitedStates--"}, \
{"name" -> "{ParisGrant, Wisconsin, UnitedStates}", "desc" -> 
            "Paris (Wisconsin, USA)", "input" -> 
            "*DPClash.CityE.Paris-_**ParisGrant.Wisconsin.UnitedStates--"}, {
           "name" -> "{Paris, Idaho, UnitedStates}", "desc" -> 
            "Paris (Idaho, USA)", "input" -> 
            "*DPClash.CityE.Paris-_**Paris.Idaho.UnitedStates--"}}}}, 
       Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, 
       Typeset`querystate$$ = {
       "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
        0.5966054`7.227232173429807, "Messages" -> {}}}, 
       DynamicBox[ToBoxes[
         AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
          Dynamic[Typeset`query$$], 
          Dynamic[Typeset`boxes$$], 
          Dynamic[Typeset`allassumptions$$], 
          Dynamic[Typeset`assumptions$$], 
          Dynamic[Typeset`open$$], 
          Dynamic[Typeset`querystate$$]], StandardForm],
        ImageSizeCache->{120., {7., 17.}},
        TrackedSymbols:>{
         Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
          Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
       DynamicModuleValues:>{},
       UndoTrackedVariables:>{Typeset`open$$}],
      BaseStyle->{"Deploy"},
      DeleteWithContents->True,
      Editable->False,
      SelectWithContents->True], "\[Rule]", "\"\<b\>\""}], ",", 
    RowBox[{
     NamespaceBox["LinguisticAssistant",
      DynamicModuleBox[{Typeset`query$$ = "NYc", Typeset`boxes$$ = 
       TemplateBox[{"\"New York City\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"City\"", ",", 
             RowBox[{"{", 
               
               RowBox[{
                "\"NewYork\"", ",", "\"NewYork\"", ",", "\"UnitedStates\""}], 
               "}"}]}], "]"}], 
         "\"Entity[\\\"City\\\", {\\\"NewYork\\\", \\\"NewYork\\\", \
\\\"UnitedStates\\\"}]\"", "\"city\""}, "Entity"], 
       Typeset`allassumptions$$ = {{
        "type" -> "Clash", "word" -> "NYc", "template" -> 
         "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> 
         "2", "Values" -> {{
           "name" -> "City", "desc" -> "a city", "input" -> 
            "*C.NYc-_*City-"}, {
           "name" -> "VisualArts", "desc" -> "a photograph", "input" -> 
            "*C.NYc-_*VisualArts-"}}}}, Typeset`assumptions$$ = {}, 
       Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {
       "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
        0.4727071`7.1261371188952785, "Messages" -> {}}}, 
       DynamicBox[ToBoxes[
         AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
          Dynamic[Typeset`query$$], 
          Dynamic[Typeset`boxes$$], 
          Dynamic[Typeset`allassumptions$$], 
          Dynamic[Typeset`assumptions$$], 
          Dynamic[Typeset`open$$], 
          Dynamic[Typeset`querystate$$]], StandardForm],
        ImageSizeCache->{177., {7., 17.}},
        TrackedSymbols:>{
         Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
          Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
       DynamicModuleValues:>{},
       UndoTrackedVariables:>{Typeset`open$$}],
      BaseStyle->{"Deploy"},
      DeleteWithContents->True,
      Editable->False,
      SelectWithContents->True], "\[Rule]", "\"\<c\>\""}]}], "}"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.70818728665341*^9, 3.7081873358402996`*^9}, {
  3.708190934366461*^9, 
  3.7081909408517027`*^9}},ExpressionUUID->"8ab43700-d676-44c5-bf9d-\
1d885cd09618"],

Cell[BoxData[
 RowBox[{"DynamicModule", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"GeoRegionValuePlot", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       NamespaceBox["LinguisticAssistant",
        DynamicModuleBox[{Typeset`query$$ = "Laos", Typeset`boxes$$ = 
         TemplateBox[{"\"Laos\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"Country\"", ",", "\"Laos\""}], "]"}], 
           "\"Entity[\\\"Country\\\", \\\"Laos\\\"]\"", "\"country\""}, 
          "Entity"], Typeset`allassumptions$$ = {}, 
         Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, 
         Typeset`querystate$$ = {
         "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
          0.485067`7.137346723274792, "Messages" -> {}}}, 
         DynamicBox[ToBoxes[
           AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
            Dynamic[Typeset`query$$], 
            Dynamic[Typeset`boxes$$], 
            Dynamic[Typeset`allassumptions$$], 
            Dynamic[Typeset`assumptions$$], 
            Dynamic[Typeset`open$$], 
            Dynamic[Typeset`querystate$$]], StandardForm],
          ImageSizeCache->{116., {7., 17.}},
          
          TrackedSymbols:>{
           Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
            Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
         DynamicModuleValues:>{},
         UndoTrackedVariables:>{Typeset`open$$}],
        BaseStyle->{"Deploy"},
        DeleteWithContents->True,
        Editable->False,
        SelectWithContents->True], "\[Rule]", "x"}], ",", 
      RowBox[{
       NamespaceBox["LinguisticAssistant",
        DynamicModuleBox[{Typeset`query$$ = "Vietnam", Typeset`boxes$$ = 
         TemplateBox[{"\"Vietnam\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"Country\"", ",", "\"Vietnam\""}], "]"}], 
           "\"Entity[\\\"Country\\\", \\\"Vietnam\\\"]\"", "\"country\""}, 
          "Entity"], 
         Typeset`allassumptions$$ = {{
          "type" -> "Clash", "word" -> "Vietnam", "template" -> 
           "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", 
           "count" -> "2", 
           "Values" -> {{
             "name" -> "Country", "desc" -> "a country", "input" -> 
              "*C.Vietnam-_*Country-"}, {
             "name" -> "Periodical", "desc" -> "a periodical", "input" -> 
              "*C.Vietnam-_*Periodical-"}}}}, Typeset`assumptions$$ = {}, 
         Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {
         "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
          1.06659`7.479542501058491, "Messages" -> {}}}, 
         DynamicBox[ToBoxes[
           AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
            Dynamic[Typeset`query$$], 
            Dynamic[Typeset`boxes$$], 
            Dynamic[Typeset`allassumptions$$], 
            Dynamic[Typeset`assumptions$$], 
            Dynamic[Typeset`open$$], 
            Dynamic[Typeset`querystate$$]], StandardForm],
          ImageSizeCache->{163., {7., 17.}},
          
          TrackedSymbols:>{
           Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
            Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
         DynamicModuleValues:>{},
         UndoTrackedVariables:>{Typeset`open$$}],
        BaseStyle->{"Deploy"},
        DeleteWithContents->True,
        Editable->False,
        SelectWithContents->True], "\[Rule]", 
       RowBox[{"3", "*", "x"}]}]}], "}"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.708190822609785*^9, 
  3.708190901378625*^9}},ExpressionUUID->"bbbeafbb-7194-4312-a26d-\
e99c0e7b3298"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1536, 781},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
FrontEndVersion->"11.1 for Microsoft Windows (64-bit) (March 13, 2017)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 198, 3, 60, "Section", "ExpressionUUID" -> \
"9c2ec51d-3c76-4a49-b3be-0a7aa5f257b1"],
Cell[781, 27, 565, 12, 30, "Input", "ExpressionUUID" -> \
"9a6e273f-82d3-4e47-9e09-6dc30235fb16"],
Cell[1349, 41, 1732, 40, 30, "Input", "ExpressionUUID" -> \
"7e04c03c-6a54-4172-8877-f7e489e320bf"],
Cell[CellGroupData[{
Cell[3106, 85, 406, 11, 30, "Input", "ExpressionUUID" -> \
"21723c62-4a24-44a1-bf14-1c43d2d03259"],
Cell[3515, 98, 2911, 41, 126, "Output", "ExpressionUUID" -> \
"d167d652-b481-4e51-a3b4-148e0d44b9fa"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6463, 144, 1426, 32, 30, "Input", "ExpressionUUID" -> \
"c6d8ad36-19be-4684-a017-3300a8c0d7f8"],
Cell[7892, 178, 8830, 224, 115, "Output", "ExpressionUUID" -> \
"32c369dc-3d91-41e0-be88-7c4ab7a4b264"]
}, Open  ]],
Cell[CellGroupData[{
Cell[16759, 407, 265, 6, 30, "Input", "ExpressionUUID" -> \
"4bde3883-fed1-4c44-ac33-805b438d5e25"],
Cell[17027, 415, 172, 3, 30, "Output", "ExpressionUUID" -> \
"c789ecf0-38f8-4195-8cee-13d8f800da33"]
}, Open  ]],
Cell[17214, 421, 2571, 46, 88, "Input", "ExpressionUUID" -> \
"ba0f937f-89b9-406e-bd96-514ff8112f7d"],
Cell[19788, 469, 3250, 62, 111, "Input", "ExpressionUUID" -> \
"35fcbf5e-5f8c-454d-9166-452f30dfe214"],
Cell[23041, 533, 1756, 39, 30, "Input", "ExpressionUUID" -> \
"c24e5d49-41cc-41c6-9ce7-342c09728158"],
Cell[24800, 574, 994, 28, 30, "Input", "ExpressionUUID" -> \
"618589de-72d1-4310-a704-d2076f61b2b5"],
Cell[25797, 604, 428, 9, 30, "Input", "ExpressionUUID" -> \
"7250d19f-1f2d-4ece-acc0-23a63fe2674d"],
Cell[26228, 615, 1013, 25, 30, "Input", "ExpressionUUID" -> \
"9292cb16-f040-4ca5-a1f9-b6f8c8a10d0e"],
Cell[CellGroupData[{
Cell[27266, 644, 178, 3, 49, "Subsection", "ExpressionUUID" -> \
"c5bb8194-d4c5-4b3b-8743-774aa4329511"],
Cell[27447, 649, 174, 3, 30, "Text", "ExpressionUUID" -> \
"a38aafc5-3966-4c48-90d5-ad8a09321bc7"],
Cell[27624, 654, 642, 13, 30, "Input", "ExpressionUUID" -> \
"b673badb-6725-4d2c-950a-8b63b9c58dfa"],
Cell[28269, 669, 1503, 35, 30, "Input", "ExpressionUUID" -> \
"12e4794b-872e-4a73-962c-b058a7b72d10"],
Cell[29775, 706, 218, 5, 30, "Text", "ExpressionUUID" -> \
"9faf5dc1-8f93-4c15-b149-735dcb01badd"],
Cell[CellGroupData[{
Cell[30018, 715, 264, 6, 30, "Input", "ExpressionUUID" -> \
"022fd87d-3d60-4ef9-8e40-615729e562d4"],
Cell[30285, 723, 172, 3, 30, "Output", "ExpressionUUID" -> \
"916f39be-0734-458d-a2c7-b16bbd12dd0a"]
}, Open  ]],
Cell[30472, 729, 2503, 45, 88, "Input", "ExpressionUUID" -> \
"87f265c9-7a03-4e75-ad20-5cce541d5e6a"],
Cell[32978, 776, 3330, 62, 107, "Input", "ExpressionUUID" -> \
"881111d3-f4e3-4712-93f4-90d069b704e4"],
Cell[36311, 840, 265, 6, 30, "Text", "ExpressionUUID" -> \
"a6645af8-444e-4174-9311-77a8ed029e1a"],
Cell[36579, 848, 2760, 64, 50, "Input", "ExpressionUUID" -> \
"7d30962a-a784-4419-a6b5-a6203de34174"],
Cell[39342, 914, 223, 5, 30, "Text", "ExpressionUUID" -> \
"f84366f4-2604-40f1-8d16-a300711725c1"],
Cell[CellGroupData[{
Cell[39590, 923, 505, 14, 30, "Input", "ExpressionUUID" -> \
"24b68e86-40d4-46c0-bd77-fe97663fd3ba"],
Cell[40098, 939, 9180, 234, 169, "Output", "ExpressionUUID" -> \
"51e1d03e-0cf6-4191-9c0e-7def8eaab5b3"]
}, Open  ]],
Cell[49293, 1176, 1326, 32, 30, "Input", "ExpressionUUID" -> \
"bafac87f-e8fc-465e-af31-e3af99d6eef1"],
Cell[50622, 1210, 200, 3, 30, "Text", "ExpressionUUID" -> \
"1424621a-c5bf-43ec-bd0e-b1235898cb40"],
Cell[50825, 1215, 1878, 42, 42, "Input", "ExpressionUUID" -> \
"bfbee5f5-cc92-4bae-84e3-8e8c9bb951ed"],
Cell[52706, 1259, 13951, 279, 74, "Input", "ExpressionUUID" -> \
"a3808d5e-7bc6-4b3c-9a0f-80337679c4db"],
Cell[66660, 1540, 749, 21, 30, "Input", "ExpressionUUID" -> \
"48f600bf-f9fc-4b1e-ad50-e145db2e2a31"],
Cell[67412, 1563, 297, 7, 30, "Text", "ExpressionUUID" -> \
"578b4375-ef9c-48b7-8f2d-ae9e49eecb12"],
Cell[67712, 1572, 1560, 36, 30, "Input", "ExpressionUUID" -> \
"94a3f59d-7c61-463f-bd7e-ec4e6e5212e9"],
Cell[69275, 1610, 374, 8, 30, "Input", "ExpressionUUID" -> \
"d4849120-cea5-4ba3-932c-f0e1cbbc5a67"],
Cell[69652, 1620, 3794, 75, 42, "Input", "ExpressionUUID" -> \
"5bf031d7-2aa0-434b-a119-1b78f882dc59"],
Cell[73449, 1697, 959, 25, 30, "Input", "ExpressionUUID" -> \
"0fc9d929-78f6-437b-b3ec-0e7c7b19d5df"],
Cell[74411, 1724, 643, 21, 30, "Input", "ExpressionUUID" -> \
"956b9924-1398-4547-95ca-edd475239fb2"],
Cell[75057, 1747, 820, 22, 30, "Input", "ExpressionUUID" -> \
"4e0299b4-1235-4dd1-a56d-f13f1c27ba93"],
Cell[75880, 1771, 1450, 41, 69, "Input", "ExpressionUUID" -> \
"963fad9e-e5e3-4192-9b13-fa28a6078220"],
Cell[77333, 1814, 337, 7, 30, "Text", "ExpressionUUID" -> \
"1a597d29-aa99-40d1-85b7-10bb4b1f4f46"],
Cell[CellGroupData[{
Cell[77695, 1825, 736, 13, 30, "Input", "ExpressionUUID" -> \
"f8a34399-b7f9-44df-9589-bfcccead387e"],
Cell[78434, 1840, 627, 12, 30, "Output", "ExpressionUUID" -> \
"088d086c-7019-4cdf-af1c-6e9cdeeb9377"]
}, Open  ]],
Cell[79076, 1855, 2103, 44, 30, "Input", "ExpressionUUID" -> \
"a42a61ed-3b93-488f-9681-46d946797903"],
Cell[81182, 1901, 1753, 48, 107, "Input", "ExpressionUUID" -> \
"a583c1e2-bb8f-4552-919a-02a8c0e34e37"],
Cell[82938, 1951, 486, 11, 30, "Input", "ExpressionUUID" -> \
"dc6137d7-95a6-4673-b1ea-afb0d0c0d0f0"],
Cell[83427, 1964, 552, 12, 50, "Input", "ExpressionUUID" -> \
"a1620973-79cd-420f-ad26-a6f6920161a1"],
Cell[83982, 1978, 20178, 410, 942, "Input", "ExpressionUUID" -> \
"9178fbfa-bed7-4cba-bea6-f4607f1efe72"],
Cell[104163, 2390, 945, 24, 104, "Input", "ExpressionUUID" -> \
"9bd4fc80-31b5-4a34-bc63-6fb2f7682e83"],
Cell[105111, 2416, 15894, 302, 795, "Input", "ExpressionUUID" -> \
"b372c013-cd69-43b6-810a-9b6b07a1c943",
 InitializationCell->True],
Cell[121008, 2720, 131, 3, 30, "Input", "ExpressionUUID" -> \
"963fbf01-40b3-4ed1-bd88-c358a98c2a04"],
Cell[121142, 2725, 205, 5, 30, "Input", "ExpressionUUID" -> \
"6141f137-7189-4c22-89e2-1b9a3e007215"],
Cell[121350, 2732, 373, 8, 50, "Input", "ExpressionUUID" -> \
"29a2e850-ac2e-4110-a1a3-d6c281282755"],
Cell[121726, 2742, 252, 6, 30, "Input", "ExpressionUUID" -> \
"5670bb6e-96e3-40b5-ad6f-f9a2e56cc55d"],
Cell[121981, 2750, 11003, 215, 42, "Input", "ExpressionUUID" -> \
"8ab43700-d676-44c5-bf9d-1d885cd09618"],
Cell[132987, 2967, 3693, 81, 42, "Input", "ExpressionUUID" -> \
"bbbeafbb-7194-4312-a26d-e99c0e7b3298"]
}, Open  ]]
}, Open  ]]
}
]
*)

